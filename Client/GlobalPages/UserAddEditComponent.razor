@page "/UserAddEditPage/{UserName}"
@inject NavigationManager navigationManager
@inject HttpClient httpClient
@inject ISnackbar Snackbar
@using SCMDWH.Client.Tools;
@using SCMDWH.Shared.Models;
@using SCMDWH.Client.JGHttpClient;
@using System.Security.Claims;
@inject JGHttpClient http;
@inject RecordLog rl;

@if (UserName != "0")
{
    <h2>Edit User: @globalAppUser.UserName</h2>
}
else
{
    <h2>Add User</h2>
}
<hr />

<EditForm Model="@globalAppUser" OnValidSubmit="HandleValidSubmit">
    <DataAnnotationsValidator />
   
<MudGrid>
    <MudItem xs="6">
            <MudTextField @bind-Value="@globalAppUser.UserName" For="@(() => globalAppUser.UserName)"
                      Label="User Name"
                      Variant="Variant.Outlined"
                      Adornment="Adornment.End"
                      AdornmentIcon="@Icons.Filled.Search"
                      ReadOnly=@readonlyUserName  />
    </MudItem>
</MudGrid>
<MudGrid>
    <MudItem xs="3">
        <MudTextField @bind-Value="@globalAppUser.Email"
                      Label="Email"
                      Variant="Variant.Outlined"
                      Adornment="Adornment.End"
                      AdornmentIcon="@Icons.Filled.Search" />
    </MudItem>
    <MudItem xs="3">
        <MudTextField @bind-Value="@globalAppUser.Mobile" For="@(() => globalAppUser.Mobile)"
                      Label="mobile"
                      Variant="Variant.Outlined"
                      Adornment="Adornment.End"
                      AdornmentIcon="@Icons.Filled.Search" />
    </MudItem>
    <MudItem xs="5">
            <MudTextField @bind-Value="@globalAppUser.Remark" For="@(() => globalAppUser.Remark)"
                      Label="Remark"
                      Variant="Variant.Outlined"
                      Adornment="Adornment.End"
                      AdornmentIcon="@Icons.Filled.Search" />
    </MudItem>
    <MudItem xs="1">
        <MudCheckBox @bind-Checked="@globalAppUser.Active" Label="Active"></MudCheckBox>
    </MudItem>
</MudGrid>
<hr />

<MudGrid>
        <MudItem xs="1">
            <MudButton Variant="Variant.Filled" Color="Color.Inherit" OnClick="resetPassword" FullWidth="true">Reset pass</MudButton>
        </MudItem>
    <MudItem xs="3">
            <MudTextField @bind-Value="@globalAppUser.Password" For="@(() => globalAppUser.Password)"
                      Label="Password"
                      Variant="Variant.Outlined"
                      Adornment="Adornment.End"
                      AdornmentIcon="@Icons.Filled.Search" InputType=InputType.Password
                      ReadOnly = "@readOnlyPassword"/>
    </MudItem>
    <MudItem xs="3">
        <MudTextField @bind-Value="@passwordConf"
                      Label="Re. Password"
                      Variant="Variant.Outlined"
                      Adornment="Adornment.End"
                      AdornmentIcon="@Icons.Filled.Search" InputType=InputType.Password ReadOnly="@readOnlyPassword" />
    </MudItem>
    <MudItem xs="1">
        <MudCheckBox @bind-Checked="@globalAppUser.External" Label="External"></MudCheckBox>
    </MudItem>
</MudGrid>
<hr />

<MudGrid>
    <MudItem xs="8">
    </MudItem>
    <MudItem xs="2">
        <MudButton Variant="Variant.Filled" Color="Color.Inherit" OnClick="Back" FullWidth="true">Back</MudButton>
    </MudItem>
    <MudItem xs="2">
        @if (UserName == "0")
        {
                <MudButton Variant="Variant.Filled" Color="Color.Inherit" OnClick="HandleValidSubmit" FullWidth="true">Add</MudButton>
        }
        else
        {
                <MudButton Variant="Variant.Filled" Color="Color.Inherit" OnClick="HandleValidSubmit" FullWidth="true">Update</MudButton>
        }
    </MudItem>
</MudGrid>
</EditForm>

@code {
    bool readOnlyPassword = true;
    private string passwordConf = "";
    private bool readonlyUserName = false;
    private string LogonUserName = "Nieznany";
    GlobalAppUsers globalAppUser = new GlobalAppUsers();
    private string currentUser = "";
    [Parameter]
    public string UserName { get; set; }
    [CascadingParameter]
    public Task<AuthenticationState> AuthState { get; set; }



    private void resetPassword()
    {
        if (globalAppUser.External)
        {
            readOnlyPassword = false;
            StateHasChanged();
        }
        else
        {
            Snackbar.Add("Pass reset only of external user", Severity.Error, config => { config.ShowCloseIcon = false; config.Icon = Icons.Rounded.Error; config.VisibleStateDuration = 500; });
        }
    }

    private void Back()
    {
        navigationManager.NavigateTo("/UserListPage");
    }


    private async void HandleValidSubmit()
    {
        if (passwordConf == globalAppUser.Password)
        {

            if (!string.IsNullOrEmpty(globalAppUser.Password))
                globalAppUser.Password = BCrypt.Net.BCrypt.HashPassword(globalAppUser.Password);


            if (UserName == "0")
            {
                await Add();
            }
            else
            {
                await Update();
            }
        }
        else
        {
            Snackbar.Add($"Error password are not the same !!!", Severity.Error, config => { config.ShowCloseIcon = false; config.Icon = Icons.Rounded.Error; config.VisibleStateDuration = 1000; });
        }
    }

    private async Task Add()
    {
        globalAppUser.Active = true;
        globalAppUser.CreatedBy = LogonUserName;
        globalAppUser.CreatedTime = DateTime.Now;
        //globalAppUser.GlobalAppUserRoles[] = null;
        if (globalAppUser.Remark == null) globalAppUser.Remark = "";

        try
        {
        string link = "/api/GlobalAppUsers/";
        var Response = await httpClient.PostAsJsonAsync<GlobalAppUsers>(link, globalAppUser);

        rl.RecordLogForLogAppReportingActions("User created:" + globalAppUser.UserName, currentUser);
  
            if (Response.StatusCode == System.Net.HttpStatusCode.Created)
            {
                navigationManager.NavigateTo("/UserListPage");
                StateHasChanged();

            }

            if (Response.StatusCode == System.Net.HttpStatusCode.Conflict)
            {
                Snackbar.Add($"Error User: {globalAppUser.UserName} already exist", Severity.Error, config => { config.ShowCloseIcon = false; config.Icon = Icons.Rounded.Error; config.VisibleStateDuration = 1000; });
            }

            if (Response.StatusCode == System.Net.HttpStatusCode.BadRequest)
            {
                Snackbar.Add($"Error User: {globalAppUser.UserName} already exist", Severity.Error, config => { config.ShowCloseIcon = false; config.Icon = Icons.Rounded.Error; config.VisibleStateDuration = 1000; });
            }


        }
        catch (Exception ex)
        {
            Snackbar.Add($"Error " + ex.Message, Severity.Error, config => { config.ShowCloseIcon = false; config.Icon = Icons.Rounded.Error; config.VisibleStateDuration = 1000; });
        }



    }
    private async Task Update()
    {

        try
        {
            string link = "/api/GlobalAppUsers/" + UserName;
            var Response = await http.Put<GlobalAppUsers>(link, globalAppUser);
            rl.RecordLogForLogAppReportingActions("User updated:" + UserName, currentUser);

            navigationManager.NavigateTo("/UserListPage");
            StateHasChanged();
        }
        catch (Exception ex)
        {
            Snackbar.Add(ex.Message, Severity.Error, config => { config.ShowCloseIcon = false; config.Icon = Icons.Rounded.Error; config.VisibleStateDuration = 1500; });
        }
    }

    protected override async Task OnInitializedAsync()
    {   
        if (UserName != "0")
        {
            var authState = await AuthState;
            var user = authState.User;
            currentUser = user.FindFirst(d => d.Type == ClaimTypes.Name)?.Value;

            readonlyUserName = true;
            string link = "/api/GlobalAppUsers/" + UserName;
            globalAppUser = await httpClient.GetFromJsonAsync<GlobalAppUsers>(link);
            globalAppUser.Password = "";
        }
       
    }


}
