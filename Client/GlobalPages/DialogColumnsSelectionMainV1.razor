@using MudBlazor.Utilities
@using SCMDWH.Shared.Models;
@inject HttpClient httpClient;


<style>
	.mud-list-item.mud-list-item-dense {
		padding-top: 0!important;
		padding-bottom: 0!important;		
	}
</style>

<MudDialog DisableSidePadding="true">
    <DialogContent>
        <MudContainer Style="max-height: 650px; overflow-y: scroll">
			<MudAlert Severity="Severity.Normal" AlertTextPosition="AlertTextPosition.Center">Display colums</MudAlert>
<div class="d-flex flex-column mud-width-full mud-height-full">
	
	<MudDropContainer T="DropItem" Items="@_dropzoneItems" @ref="_container" ItemsSelector="@((item,dropzone) => item.Selector == dropzone)" ItemDropped="ItemUpdated" Class="d-flex flex-wrap flex-grow-1">
		<ChildContent>
		
					<MudPaper Class="ma-4 flex-grow-1">
				<MudList Clickable="true" Class="d-flex flex-column mud-height-full" Dense=true >
							<MudListSubheader Style="background-color:aliceblue">On screen</MudListSubheader>
								<MudDropZone T="DropItem" Identifier="1" Class="flex-grow-1" AllowReorder="true"  />
						</MudList>
					</MudPaper>


			<MudPaper Class="ma-4 flex-grow-1">
				<MudList Clickable="true" Class="d-flex flex-column mud-height-full" Dense="true" >
					<MudListSubheader Style="background-color:aliceblue">Hiden</MudListSubheader>
					<MudDropZone T="DropItem" Identifier="2" Class="flex-grow-1" AllowReorder="true"  />
				</MudList>
			</MudPaper>
			
		</ChildContent>
		<ItemRenderer >
			<MudListItem Text="@($"{context.Name}")" Dense="true" />
		</ItemRenderer>
	</MudDropContainer>
				
</div>

	</MudContainer>
	   </DialogContent>
	<DialogActions>

		<MudGrid>
		
			<MudItem xs="2"></MudItem>

			<MudItem xs="4">
				<MudButton OnClick="CancelData" Variant="Variant.Outlined" Size="Size.Medium" StartIcon="@Icons.Material.Filled.Cancel">Cancel</MudButton>
			</MudItem>
			<MudItem xs="4">
				<MudButton Color="Color.Primary" Variant="Variant.Outlined" Size="Size.Medium" StartIcon="@Icons.Material.Filled.Save" OnClick="SaveData">Save</MudButton>
			</MudItem>
		</MudGrid>
	</DialogActions>

	   </MudDialog>
@code {
	[Parameter]
	public string UserName { get; set; }

	[CascadingParameter] 
	MudDialogInstance MudDialog { get; set; }

	private MudDropContainer<DropItem> _container;

	List<CarAdviceMainPlanColumn> columsForDisplayListDb = new List<CarAdviceMainPlanColumn>();

	List<DropItem> _serverData = new();
	private List<DropItem> _dropzoneItems = new();


	protected async override Task OnInitializedAsync()
	{

		Console.WriteLine(CultureInfo.CurrentCulture.Name);

		List<DropItem> newdata = new List<DropItem>();

		string linkcoluser = "/api/CarAdviceMainPlanColums/MainPlanComumByUser/" + UserName;
		columsForDisplayListDb = await httpClient.GetFromJsonAsync<List<CarAdviceMainPlanColumn>>(linkcoluser);

		if (CultureInfo.CurrentCulture.Name == "en-US")
		{
			int i = 1;
			foreach (var gg in columsForDisplayListDb)
			{
				if (gg.Hidden)
					newdata.Add(new DropItem() { Order = i, Name = gg.MainScreenColumn, Selector = "2" });
				if (!gg.Hidden)
					newdata.Add(new DropItem() { Order = i, Name = gg.MainScreenColumn, Selector = "1" });
				i++;
			}
		}

		if (CultureInfo.CurrentCulture.Name == "pl-PL")
		{
			int i = 1;
			foreach (var gg in columsForDisplayListDb)
			{
				if (gg.Hidden)
					newdata.Add(new DropItem() { Order = i, Name = gg.plHeader, Selector = "2" });
				if (!gg.Hidden)
					newdata.Add(new DropItem() { Order = i, Name = gg.plHeader, Selector = "1" });
				i++;
			}
		}

		_dropzoneItems = newdata;
		RefreshContainer();


		StateHasChanged();




	}

	private void ItemUpdated(MudItemDropInfo<DropItem> dropItem)
	{

		dropItem.Item.Selector = dropItem.DropzoneIdentifier;

		var indexOffset = dropItem.DropzoneIdentifier switch
		{
			"2" => _dropzoneItems.Count(x => x.Selector == "1"),
			_ => 0,
		};

		_dropzoneItems.UpdateOrder(dropItem, item => item.Order, indexOffset);

	}





	private void RefreshContainer()
	{
		//update the binding to the container
		StateHasChanged();

		//the container refreshes the internal state
		_container.Refresh();
	}


	private async Task CancelData()
	{
		MudDialog.Close(DialogResult.Cancel());
	}

	private async Task SaveData()
	{
		int i = 1;
		foreach(var itemForupdate in _dropzoneItems.OrderBy(o => o.Order))
		{
			CarAdviceMainPlanColumn columnForUpdate = new();

			if (CultureInfo.CurrentCulture.Name == "en-US")
			{
				columnForUpdate = columsForDisplayListDb.FirstOrDefault(c => c.MainScreenColumn == itemForupdate.Name);
			}

			if (CultureInfo.CurrentCulture.Name == "pl-PL")
			{
				columnForUpdate = columsForDisplayListDb.FirstOrDefault(c => c.plHeader == itemForupdate.Name);
			}

			columnForUpdate.Hidden = itemForupdate.Selector == "2";

			columnForUpdate.OrderColumn = i;
			i++;

			string linkcoluser = "/api/CarAdviceMainPlanColums/" + columnForUpdate.Id;
			var res =  httpClient.PutAsJsonAsync<CarAdviceMainPlanColumn>(linkcoluser, columnForUpdate);
			await Task.Delay(50);
		}
		MudDialog.Close(DialogResult.Ok("OK"));
	}



	public class DropItem
	{
		public string Name { get; init; }
		public string Selector { get; set; }
		public int Order { get; set; }
	}

	
}
