@page "/grcarAdvice"

@using SCMDWH.Shared.Models;
@using System.Security.Claims;
@using SCMDWH.Shared.Tools;
@inject IStringLocalizer<CultureExample2> Loc
@inject NavigationManager navigationManager
@inject HttpClient httpClient
@inject IDialogService DialogService;

@if (ListGRCAMainTable is null)
{
    <p>Loading </p>
}
else
{
    <MudDataGrid T="CarAdviceGrTruckMainTable" ColumnResizeMode="ResizeMode.Container" Dense="true" Hover="true" Bordered="true" Striped="true" FixedHeader="true" FixedFooter="true"
                 Height="35em" RowsPerPage="30" MultiSelection="false" Items="@ListGRCAMainTable" SortMode="SortMode.Multiple" Filterable="true"
                 FilterCaseSensitivity="DataGridFilterCaseSensitivity.CaseInsensitive" >
        <ToolBarContent>



            <MudGrid>
                <MudItem xs="2">
                    <MudButton Target="_blank" Variant="Variant.Text" EndIcon="@Icons.Material.Filled.ViewColumn"
                               Style="text-transform:none ; margin-top:25px!important" OnClick="ShowColumsForSelection" Size="Size.Small">
                        @Loc["lbColumns"]
                    </MudButton>
                </MudItem>
                <MudItem xs="2">
                    <MudButton Target="_blank" Variant="Variant.Text" EndIcon="@Icons.Material.Filled.ImportExport"
                               Style="text-transform:none ; margin-top:25px!important" OnClick="ImportFromExcel" Size="Size.Small">
                        Excel
                    </MudButton>
                </MudItem>
                <MudItem xs="2">
                    <MudButton Target="_blank" Variant="Variant.Text" EndIcon="@Icons.Material.Filled.AddToDrive"
                               Style="text-transform:none ; margin-top:25px!important" OnClick="NewItemsCarAdviceMain" Size="Size.Small">
                        @Loc["lbNew"]
                    </MudButton>
                </MudItem>
                <MudItem xs="3">
                    <MudDateRangePicker DisableToolbar="true" IconSize="Size.Small" @ref="_picker" @bind-DateRange="_dateRange" AutoClose="@_autoClose">
                        <PickerActions>
                            <MudButton Class="mr-auto align-self-start" OnClick="@(() => _picker.Clear())">Clear</MudButton>
                            <MudButton OnClick="@(() => _picker.Close(false))">Cancel</MudButton>
                            <MudButton Color="Color.Primary" OnClick="SelectTimeFrameFromPicker">Ok</MudButton>
                        </PickerActions>
                    </MudDateRangePicker>
                </MudItem>
                <MudItem xs="3">
                    <MudCheckBox Style="margin-top:20px!important" Size="Size.Small" Dense="true" @bind-Checked="CheckTest">@Loc["lbPickingstatusCheckBox"]</MudCheckBox>
                </MudItem>
                 
            </MudGrid>
        </ToolBarContent>

        <Columns>

            @if (@CultureInfo.CurrentCulture.Name == "pl-PL")
            {
                <HierarchyColumn Property="x => x.Id" Title="Id" Hidden="false" Sortable="true" />
                <TemplateColumn CellClass="d-flex justify-end">
                    <CellTemplate>
                        <MudButton Size="@Size.Small" Variant="@Variant.Outlined" Color="@Color.Default" StartIcon="@Icons.Material.Filled.ViewList" @onclick="@(()=>EditGr(@context.Item.Id))"></MudButton>
                    </CellTemplate>
                </TemplateColumn>
                <PropertyColumn Property="x => x.Id" Title="Id"  Sortable="true" Filterable="false" />
                <PropertyColumn Property="x => x.AddDate" Title="Add Date" Sortable="true" Filterable="true" />
                <PropertyColumn Property="x => x.AddByUser" Title="Add Date" Sortable="true" Filterable="false" />

                <PropertyColumn Property="x => x.Invoices" Title="Invoices" Sortable="true" Filterable="true" />
                    <PropertyColumn Property="x => x.Ata" Title="ATA" Sortable="true" Filterable="false" />
                        <PropertyColumn Property="x => x.ETD" Title="ETD" Sortable="true" Filterable="false" />
                            <PropertyColumn Property="x => x.RemarksWh" Title="Uwagi magazyn" Sortable="true" Filterable="false" />
                                <PropertyColumn Property="x => x.PickingStatus" Title="Status" Sortable="true" Filterable="false" />
                <PropertyColumn Property="x => x.RemarkS" Title="Uwagi ochrona" Sortable="true" Filterable="false" />
            }
        </Columns>
        <ChildRowContent>
            <MudCard>
                @*            <MudCardHeader>
            <CardHeaderContent>

            </CardHeaderContent>
            </MudCardHeader>*@
                <MudCardContent>
                    <MudSimpleTable Style="overflow-x: auto;" Dense="true" Hover="true" Bordered="true" Striped="true">
                        <thead>
                            <tr>
                                <th>Invoice</th>
                                <th>Container</th>
                                <th>Material</th>
                                <th>Pallet No</th>
                                <th>Pallet Qty</th>
                                <th>Qty</th>
                            </tr>
                        </thead>
                        <tbody>
                            @foreach (var row in context.Item.CarAdviceGrTruckItems)
                            {
                                <tr>
                                    <td>@row.InvoiceNo</td>
                                    <td>@row.ContainerNo</td>
                                    <td>@row.Material</td>
                                    <td>@row.PalletNo</td>
                                    <td>@row.TotalPalletQty</td>
                                    <td>@row.TotalQty</td>
                                </tr>
                            }
                        </tbody>
                    </MudSimpleTable>
                </MudCardContent>
            </MudCard>
        </ChildRowContent>
        <PagerContent>
            <MudGrid>
                <MudItem xs="2">
                    <MudButton Target="_blank" Variant="Variant.Text" EndIcon="@Icons.Material.Filled.Exposure"
                               Style="text-transform:none ; margin-top:10px!important" OnClick="ExportToExcel" Size="Size.Small">
                        @Loc["lbExportExcel"]
                    </MudButton>
                </MudItem>
                <MudItem xs="10">
                    <MudDataGridPager T="CarAdviceGrTruckMainTable" PageSizeOptions="new int[] { 20, 50}" RowsPerPageString=@Loc["lbRowPerPage"] />
                </MudItem>
            </MudGrid>
        </PagerContent>
    </MudDataGrid>

}




@code {
    [CascadingParameter]
    public Error Error { get; set; }

    [CascadingParameter]
    public Task<AuthenticationState> AuthState { get; set; }

    List<CarAdviceGrTruckMainTable> ListGRCAMainTable = new List<CarAdviceGrTruckMainTable>();

    private MudDateRangePicker _picker;
    private DateRange _dateRange = new DateRange();
    private bool _autoClose;
    private bool _checkTest;
    private string UserName = "";
    GlobalAppUsersParameters userParametersGRDates = new();
    private DateTime ldGRStart;
    private DateTime ldGREnd;
 

    private bool CheckTest
    {
        get { return _checkTest; }
        set { _checkTest = value; HandleCheck(value); }
    }
    async void HandleCheck(bool IsChecked)
    {

        //if (IsChecked)
        //    await ReadData(true);
        //if (!IsChecked)
        //    await ReadData(false);

    }

    private async void ExportToExcel()
    {
        //StateHasChanged();
        //var response = await httpClient.GetAsync("/api/Raport/ReportToExcel/" + UserName);
        //response.EnsureSuccessStatusCode();
        //var fileBytes = await response.Content.ReadAsByteArrayAsync();
        //var fileName = $"CarAdviceData{DateTime.Now.ToString("yyyy-MM-dd", System.Globalization.CultureInfo.InvariantCulture)}.xlsx";
        //await JSRuntime.InvokeAsync<object>("saveAsFile", fileName, Convert.ToBase64String(fileBytes));
        //StateHasChanged();
    }

    private async void EditGr(long iiid)
    {

        navigationManager.NavigateTo($"/editGrTuckWh/{iiid.ToString()}");



    }

    protected override async Task OnInitializedAsync()
    {
        try
        {
            await ReadData(false);
            StateHasChanged();
        }
        catch (Exception ex)
        {
            Error.ProcessError(ex);
        }
    }


    private async Task ReadData(bool NoSent)
    {
        IEnumerable<Claim> claims = Enumerable.Empty<Claim>();
        var authState = await AuthState;
        var user = authState.User;
        if (!user.Identity.IsAuthenticated)
        {
            navigationManager.NavigateTo("/login");
        }
        else
        {
            UserName = user.FindFirst(d => d.Type == ClaimTypes.Name)?.Value;
            claims = user.Claims;
            string wszystkieRole = user.FindFirst(c => c.Type == ClaimTypes.Role)?.Value;

            //if (wszystkieRole.Contains("SECURITY")) rolaSecurity = true;
            //if (wszystkieRole.Contains("WH")) rolaWh = true;
        }

        // read users parameters

        string linkUserParameters = "/api/GlobalAppUsersParameters/" + UserName;


        userParametersGRDates = await httpClient.GetFromJsonAsync<GlobalAppUsersParameters>(linkUserParameters);

        if (userParametersGRDates == null)
        {
            ldGRStart = DateTime.Now.AddMonths(-3);
            ldGREnd = DateTime.Now;
        }
        else
        {
            ldGRStart = userParametersGRDates.DateGRMainCAFrom;
            ldGREnd = userParametersGRDates.DateGRMainCATo;
        }

        // end users parameters

        _dateRange = new DateRange(ldGRStart, ldGREnd);

        string linkLoad = "";

        if (NoSent)
        {
            //Update controler
            // linkLoad = "/api/CarAdviceMainTables/GetbyDateNoSent/" + Helpers.ChangeDateToString(ldGRStart) + "/" + Helpers.ChangeDateToString(ldGREnd);
        }
        else
        {
            linkLoad = "/api/CarAdviceGrTruckMainTable/GetGRbyDateNoSent/" + Helpers.ChangeDateToString(ldGRStart) + "/" + Helpers.ChangeDateToString(ldGREnd);
        }
        //!!!!!!!!!!!!!! -- poprawic inna tabela GR---------
        ListGRCAMainTable = await httpClient.GetFromJsonAsync<List<CarAdviceGrTruckMainTable>>(linkLoad);
        // wczytanie kolumn

        string linkcoluser = "/api/CarAdviceGrMainPlanComumControllery/GRMainPlanComumByUser/" + UserName;
        /// read colums for display main plan screen
       
    }

    private async Task SelectTimeFrameFromPicker()
    {
        _picker.Close();
        //userParametersGRDates.DateMainCAFrom = userParametersGRDates.DateMainCAFrom;
        //userParametersGRDates.DateMainCATo = userParametersGRDates.DateMainCATo;
        //userParametersGRDates.DateGRMainCAFrom = (DateTime)_dateRange.Start;
        //userParametersGRDates.DateGRMainCATo = (DateTime)_dateRange.End;
        //userParametersGRDates.UserName = UserName;
        //string linkForPost = "api/GlobalAppUsersParameters";
        //await httpClient.PostAsJsonAsync<GlobalAppUsersParameters>(linkForPost, userParametersGRDates);
        //DateTime dStart = (DateTime)_dateRange.Start;
        //DateTime dEnd = (DateTime)_dateRange.End;
        //string linkzDates = "/api/CarAdviceMainTables/GetbyDate/" + Helpers.ChangeDateToString(dStart) + "/" + Helpers.ChangeDateToString(dEnd);
        //ListGRCAMainTable = await httpClient.GetFromJsonAsync<List<CarAdviceGrTruckMainTable>>(linkzDates);
        //StateHasChanged();
        //StateHasChanged();
    }

    private async Task NewItemsCarAdviceMain()
    {
        CarAdviceGrTruckMainTable CarAdviceMainTableNewForSave = new CarAdviceGrTruckMainTable();
        CarAdviceGrTruckMainTable CarAdviceMainTablejsonCamel = new CarAdviceGrTruckMainTable();
        var parameters = new DialogParameters { ["Id"] = "XXX" };
        var dialog = DialogService.Show<GRCarAdviceNewComponent>("", parameters);
        var result = await dialog.Result;
        if (!result.Cancelled)
        {
            //CarAdviceMainTableNewForSave = (CarAdviceMainTable)result.Data;

            //string linkAddNew = "/api/CarAdviceMainTables";
            //var response = await httpClient.PostAsJsonAsync<CarAdviceMainTable>(linkAddNew, CarAdviceMainTableNewForSave);
            //// zamiana jsona Camel na Pascal
            //var jsonResposeWithId = await response.Content.ReadAsStringAsync();
            //CarAdviceMainTablejsonCamel = JsonConvert.DeserializeObject<CarAdviceMainTable>(jsonResposeWithId);
            //string jsonStringCANew = System.Text.Json.JsonSerializer.Serialize(CarAdviceMainTablejsonCamel);

            //rl.RecordOperationLog("New item",
            //jsonStringCANew,
            //UserName, "Success");

            //await ReadData(false);
            //StateHasChanged();
        }

    }

    private async Task ShowColumsForSelection()
    {
        //var parameters = new DialogParameters { ["Username"] = UserName };
        //var dialog = DialogService.Show<GRDialogColumsSelection>("", parameters);
        //var result = await dialog.Result;

        //if (!result.Cancelled)
        //{
        //    navigationManager.NavigateTo("/grcarAdvice", true);
        //    StateHasChanged();
        //}
    }

    private void ImportFromExcel()
    {
        navigationManager.NavigateTo("/newGRfromExcel");
    }
}
