@page "/grcarAdvice"
@using SCMDWH.Shared.Models;
@using System.Security.Claims;
@using SCMDWH.Shared.Tools;
@inject IStringLocalizer<CultureExample2> Loc
@inject NavigationManager navigationManager
@inject HttpClient httpClient
@inject IDialogService DialogService;
@inject IStringLocalizer<CultureExample2> Loc


@if (ListGRCAMainTable is null)
{
    <p>Loading </p>
}
else
{
    <MudDataGrid T="CarAdviceGrTruckMainTable" ColumnResizeMode="ResizeMode.Container" Dense="true" Hover="true" Bordered="true" Striped="true" FixedHeader="true" FixedFooter="true"
                 Height="40em" RowsPerPage="30" MultiSelection="false" Items="@ListGRCAMainTable" SortMode="SortMode.Multiple" Filterable="true"
                 FilterCaseSensitivity="DataGridFilterCaseSensitivity.CaseInsensitive">
        <ToolBarContent>
            <MudGrid >
                <MudItem xs="2">
                    <MudButton Target="_blank" Variant="Variant.Text" EndIcon="@Icons.Material.Filled.ImportExport"
                               Style="text-transform:none ; margin-top:25px!important" OnClick="ImportFromExcel" Size="Size.Small">
                        Excel
                    </MudButton>
                </MudItem>
                <MudItem xs="2">
                    <MudButton Target="_blank" Variant="Variant.Text" EndIcon="@Icons.Material.Filled.AddToDrive"
                               Style="text-transform:none ; margin-top:25px!important" OnClick="NewItemsCarAdviceMain" Size="Size.Small">
                        @Loc["lbNew"]
                    </MudButton>
                </MudItem>
                <MudItem xs="3">
                    <MudDateRangePicker DisableToolbar="true" IconSize="Size.Small" @ref="_picker" @bind-DateRange="_dateRange" AutoClose="@_autoClose">
                        <PickerActions>
                            <MudButton Class="mr-auto align-self-start" OnClick="@(() => _picker.Clear())">Clear</MudButton>
                            <MudButton OnClick="@(() => _picker.Close(false))">Cancel</MudButton>
                            <MudButton Color="Color.Primary" OnClick="SelectTimeFrameFromPicker">Ok</MudButton>
                        </PickerActions>
                    </MudDateRangePicker>
                </MudItem>
            </MudGrid>
        </ToolBarContent>
        <Columns>

            @if (@CultureInfo.CurrentCulture.Name == "pl-PL")
            {
                <HierarchyColumn Property="x => x.Id" Title="Id" Hidden="false" Sortable="true" />
                <TemplateColumn CellClass="d-flex justify-end" Filterable="false" Sortable="false">
                    <CellTemplate>
                        <MudButton Size="@Size.Small" Variant="@Variant.Outlined" Color="@Color.Default" StartIcon="@Icons.Material.Filled.CarRental"  @onclick="@(()=>EditGr(@context.Item.Id))"></MudButton>
                    </CellTemplate>
                </TemplateColumn>
                <PropertyColumn Property="x => x.Id" Title="Id" Sortable="true" Filterable="false" />
                <PropertyColumn Property="x => x.ETD" Title="@Loc["lbEtdDate"]" Sortable="true" Filterable="false" />
                <PropertyColumn Property="x => x.Invoices" Title="@Loc["lbInvoice"]" Sortable="true" Filterable="true" />
                <PropertyColumn Property="x => x.PickingStatus" Title="@Loc["lbPickingstatus"]" Sortable="true" Filterable="false" />
                <PropertyColumn Property="x => x.AddDate" Title="@Loc["lbAdDate"]" Sortable="true" Filterable="true" />
                <PropertyColumn Property="x => x.AddByUser" Title="@Loc["lbAddbyUser"]" Sortable="true" Filterable="false" />
                <PropertyColumn Property="x => x.Ata" Title="@Loc["lbAta"]" Sortable="true" Filterable="false" />

                <PropertyColumn Property="x => x.TpvEnterTime" Title="@Loc["lbTPVEntrydate"]" Sortable="true" Filterable="false" />
                <PropertyColumn Property="x => x.TpvExitTime" Title="@Loc["lbTPVExitdate"]" Sortable="true" Filterable="false" />
                <PropertyColumn Property="x => x.RemarksWh" Title="@Loc["lbRemarkWH"]" Sortable="true" Filterable="false" />

                <PropertyColumn Property="x => x.RemarkS" Title="@Loc["lbRemarksS"]" Sortable="true" Filterable="false" />
            }
        </Columns>
        <ChildRowContent>
            <MudCard>

                <MudCardContent>
                    <MudSimpleTable Style="width:70%;" Dense="true" Hover="true" Bordered="true" Striped="true">
                        <col style="width:10%">
                        <col style="width:10%">
                        <col style="width:10%">
                         <col style="width:10%">
                          <col style="width:1%">
                        <col style="width:1%">
                        
                        <thead>
                            <tr>
                                <th >Invoice</th>
                                <th >Container</th>
                                <th >Material</th>
                                <th >Pallet No</th>
                                <th >Pallet Qty</th>
                                <th >Qty</th>
                            </tr>
                        </thead>
                        <tbody>
                            @foreach (var row in context.Item.CarAdviceGrTruckItems)
                            {
                                <tr>
                                    <td>@row.InvoiceNo</td>
                                    <td>@row.ContainerNo</td>
                                    <td>@row.Material</td>
                                    <td>@row.PalletNo</td>
                                    <td>@row.TotalPalletQty</td>
                                    <td>@row.TotalQty</td>
                                </tr>
                            }
                        </tbody>
                    </MudSimpleTable>
                </MudCardContent>
            </MudCard>
        </ChildRowContent>
        <PagerContent>
            <MudGrid>
                <MudItem xs="2">
                    <MudButton Target="_blank" Variant="Variant.Text" EndIcon="@Icons.Material.Filled.Exposure"
                               Style="text-transform:none ; margin-top:10px!important" OnClick="ExportToExcel" Size="Size.Small">
                        @Loc["lbExportExcel"]
                    </MudButton>
                </MudItem>
                <MudItem xs="10">
                    <MudDataGridPager T="CarAdviceGrTruckMainTable" PageSizeOptions="new int[] { 20, 50, 100}" RowsPerPageString=@Loc["lbRowPerPage"] />
                </MudItem>
            </MudGrid>
        </PagerContent>
    </MudDataGrid>

}




@code {
    [CascadingParameter]
    public Error Error { get; set; }

    [CascadingParameter]
    public Task<AuthenticationState> AuthState { get; set; }

    List<CarAdviceGrTruckMainTable> ListGRCAMainTable = new List<CarAdviceGrTruckMainTable>();

    private MudDateRangePicker _picker;
    private DateRange _dateRange = new DateRange();
    private bool _autoClose;
    private bool _checkTest;
    private string UserName = "";
    GlobalAppUsersParameters userParametersGRDates = new();
    private DateTime ldGRStart;
    private DateTime ldGREnd;


    private bool CheckTest
    {
        get { return _checkTest; }
        set { _checkTest = value; HandleCheck(value); }
    }
    async void HandleCheck(bool IsChecked)
    {

        //if (IsChecked)
        //    await ReadData(true);
        //if (!IsChecked)
        //    await ReadData(false);

    }

    private async void ExportToExcel()
    {
        //StateHasChanged();
        //var response = await httpClient.GetAsync("/api/Raport/ReportToExcel/" + UserName);
        //response.EnsureSuccessStatusCode();
        //var fileBytes = await response.Content.ReadAsByteArrayAsync();
        //var fileName = $"CarAdviceData{DateTime.Now.ToString("yyyy-MM-dd", System.Globalization.CultureInfo.InvariantCulture)}.xlsx";
        //await JSRuntime.InvokeAsync<object>("saveAsFile", fileName, Convert.ToBase64String(fileBytes));
        //StateHasChanged();
    }

    private async void EditGr(long iiid)
    {

        navigationManager.NavigateTo($"/editGrTuckWh/{iiid.ToString()}");



    }

    protected override async Task OnInitializedAsync()
    {
        try
        {
            await ReadData(false);
            StateHasChanged();
        }
        catch (Exception ex)
        {
            Error.ProcessError(ex);
        }
    }


    private async Task ReadData(bool NoSent)
    {
        IEnumerable<Claim> claims = Enumerable.Empty<Claim>();
        var authState = await AuthState;
        var user = authState.User;
        if (!user.Identity.IsAuthenticated)
        {
            navigationManager.NavigateTo("/login");
        }
        else
        {
            UserName = user.FindFirst(d => d.Type == ClaimTypes.Name)?.Value;
            claims = user.Claims;
            string wszystkieRole = user.FindFirst(c => c.Type == ClaimTypes.Role)?.Value;

            //if (wszystkieRole.Contains("SECURITY")) rolaSecurity = true;
            //if (wszystkieRole.Contains("WH")) rolaWh = true;
        }

        // read users parameters

        string linkUserParameters = "/api/GlobalAppUsersParameters/" + UserName;


        userParametersGRDates = await httpClient.GetFromJsonAsync<GlobalAppUsersParameters>(linkUserParameters);

        if (userParametersGRDates == null)
        {
            ldGRStart = DateTime.Now.AddMonths(-3);
            ldGREnd = DateTime.Now;
        }
        else
        {
            ldGRStart = userParametersGRDates.DateGRMainCAFrom;
            ldGREnd = userParametersGRDates.DateGRMainCATo;
        }

        // end users parameters

        _dateRange = new DateRange(ldGRStart, ldGREnd);

        string linkLoad = "";


        linkLoad = "/api/CarAdviceGrTruckMainTable/GetGRbyDateNoSent/" + Helpers.ChangeDateToString(ldGRStart) + "/" + Helpers.ChangeDateToString(ldGREnd);

        ListGRCAMainTable = await httpClient.GetFromJsonAsync<List<CarAdviceGrTruckMainTable>>(linkLoad);
        // wczytanie kolumn

    }

    private async Task SelectTimeFrameFromPicker()
    {
        _picker.Close();
        userParametersGRDates.DateMainCAFrom = userParametersGRDates.DateMainCAFrom;
        userParametersGRDates.DateMainCATo = userParametersGRDates.DateMainCATo;
        userParametersGRDates.DateGRMainCAFrom = (DateTime)_dateRange.Start;
        userParametersGRDates.DateGRMainCATo = (DateTime)_dateRange.End;
        userParametersGRDates.UserName = UserName;
        string linkForPost = "api/GlobalAppUsersParameters";
        await httpClient.PostAsJsonAsync<GlobalAppUsersParameters>(linkForPost, userParametersGRDates);
        DateTime dStart = (DateTime)_dateRange.Start;
        DateTime dEnd = (DateTime)_dateRange.End;
        string linkzDates = "/api/CarAdviceGrTruckMainTable/GetGRbyDateNoSent/" + Helpers.ChangeDateToString(dStart) + "/" + Helpers.ChangeDateToString(dEnd);
        ListGRCAMainTable = await httpClient.GetFromJsonAsync<List<CarAdviceGrTruckMainTable>>(linkzDates);
        StateHasChanged();
    }

    private async Task NewItemsCarAdviceMain()
    {
        CarAdviceGrTruckMainTable CarAdviceMainTableNewForSave = new CarAdviceGrTruckMainTable();
        CarAdviceGrTruckMainTable CarAdviceMainTablejsonCamel = new CarAdviceGrTruckMainTable();
        var parameters = new DialogParameters { ["Id"] = "XXX" };
        var dialog = DialogService.Show<GRCarAdviceNewComponent>("", parameters);
        var result = await dialog.Result;
        if (!result.Cancelled)
        {
            await ReadData(false);
            StateHasChanged();
        }

    }


    private void ImportFromExcel()
    {
        navigationManager.NavigateTo("/newGRfromExcel");
    }
}



<style>
    .mud-data-grid .mud-table-cell .column-header .sortable-column-header {
        font-size: xx-small !important;
    }
    .mud-table-cell {
        padding: 0px !important;
        font-size: small !important;
        text-transform: uppercase !important;
        text-align: left !important;
    }
    @@media (min-width: 1080px) {
        .example {
            width: 1080px;
            margin-left: auto !important;
            margin-right: auto !important;
        }
    }
</style>