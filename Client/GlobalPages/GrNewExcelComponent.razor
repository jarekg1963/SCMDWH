@page "/newGRfromExcel"
@using SCMDWH.Client.Tools;
@using NPOI.SS.UserModel;
@using NPOI.XSSF.UserModel;
@using SCMDWH.Shared.DTO;
@using SCMDWH.Shared.Models;
@using System.Security.Claims;
@inject NavigationManager navigationManager
@inject HttpClient httpClient
@inject IStringLocalizer<CultureExample2> Loc
@inject IDialogService DialogService;


@*<hr />
<InputFile OnChange="ReadExcelNpoi" class="form-control form-control-lg" id="formFileLg" type="file">Select excel file</InputFile>
<hr />
*@

<br />

<MudGrid Class="border-solid border-2 mud-border-default pa-4" Elevation="0">
    <MudItem xs="2">
        <MudFileUpload T="IBrowserFile" FilesChanged="UploadFiles">
            <ButtonTemplate>
                <MudButton HtmlTag="label"
                           Variant="Variant.Filled"
                           Color="Color.Default"
                           StartIcon="@Icons.Material.Filled.CloudUpload"
                           for="@context">
                    @Loc["lbUploadFiles"]
                </MudButton>
            </ButtonTemplate>
        </MudFileUpload>
    </MudItem>
    <MudItem xs="6">
        @if (files != null)
        {
            <MudListItem Icon="@Icons.Material.Filled.AttachFile">
                @ImportedfileName <code>@Importedfilesize</code>
            </MudListItem>
        }
    </MudItem>
</MudGrid>

<br />

@if (listImportGrExcel == null)
{
    <p><em>Loading...</em></p>
}
else
{

    <MudTable Items="@listImportGrExcel" Dense="@dense" Hover="@hover" Bordered="@bordered" Striped="@striped" FixedFooter="true"
              FixedHeader="true" Height="38em" RowsPerPage="18" Filter="new Func<ImportGrExcel,bool>(FilterFunc)">
 
        <ToolBarContent>
            <MudText Typo="Typo.h6">Periodic Elements</MudText>
            <MudSpacer />
            <MudTextField @bind-Value="searchString" Placeholder="Search" Adornment="Adornment.Start" AdornmentIcon="@Icons.Material.Filled.Search" IconSize="Size.Medium" Class="mt-0"></MudTextField>
        </ToolBarContent>
        <HeaderContent>
            <MudTh Class="Nag">Id</MudTh>
            <MudTh Class="Nag">@Loc["lbEtdDate"]</MudTh>
            <MudTh Class="Nag">@Loc["lbEtdTime"]</MudTh>
            <MudTh Class="Nag">@Loc["lbSender"]</MudTh>
            <MudTh Class="Nag">@Loc["lbContainer"]</MudTh>
            <MudTh Class="Nag">@Loc["lbStatuscodes"]</MudTh>
            <MudTh Class="Nag">@Loc["lbMaterial"]</MudTh>
            <MudTh Class="Nag">@Loc["lbInvoice"]</MudTh>
            <MudTh Class="Nag">@Loc["lbMaterial"]</MudTh>
            <MudTh Class="Nag">@Loc["lbCarAdvice"]</MudTh>
            <MudTh Class="Nag">@Loc["lbQuality"]</MudTh>
            <MudTh Class="Nag">@Loc["lbQuality"]</MudTh>
            <MudTh Class="Nag">@Loc["lbEdit"]</MudTh>
            <MudTh Class="Nag">@Loc["lbDelete"]</MudTh>
        </HeaderContent>
        <RowTemplate>
            <MudTd DataLabel="Nr">@context.Id</MudTd>
            <MudTd DataLabel="Nr">@context.DataEtd</MudTd>
            <MudTd DataLabel="Sign">@context.HourEtd</MudTd>
            <MudTd DataLabel="Name">@context.Sender</MudTd>
            <MudTd DataLabel="Position">@context.ContainerNo</MudTd>
            <MudTd DataLabel="Molar mass">@context.PickingStatus</MudTd>
            <MudTd DataLabel="Molar mass">@context.Material</MudTd>
            <MudTd DataLabel="Molar mass">@context.InvoiceNo</MudTd>
            <MudTd DataLabel="Molar mass">@context.PartNo</MudTd>
            <MudTd DataLabel="Molar mass">@context.CarNumber</MudTd>
            <MudTd DataLabel="Molar mass">@context.TotalPalletQty</MudTd>
            <MudTd DataLabel="Molar mass">@context.TotalQty</MudTd>
      @*      <MudTd DataLabel="Molar mass">@context.Remark</MudTd>*@
            <MudTd DataLabel="Edit">
                <MudIconButton @onclick="@(()=>Edit(@context))" Color="Color.Default" Icon="@Icons.Material.Filled.Edit" Size="Size.Small" IconSize="Size.Small" />
            </MudTd>
            <MudTd DataLabel="Delete">
                <MudIconButton @onclick="@(()=>Delete(@context))" Color="Color.Secondary" Icon="@Icons.Material.Filled.Delete" Size="Size.Small" IconSize="Size.Small" />
            </MudTd>
        </RowTemplate>
        <PagerContent>
            <MudTablePager PageSizeOptions="new int[]{50, 100}" />
        </PagerContent>
    </MudTable>
    <MudGrid>
        <MudItem xs="6">

        </MudItem>


        <MudItem xs="2">

        </MudItem>

        <MudItem xs="2">
            <MudButton OnClick="CloseCancel" Variant="Variant.Outlined" Size="Size.Medium" StartIcon="@Icons.Material.Filled.Cancel">@Loc["lbCancel"]</MudButton>
        </MudItem>
        <MudItem xs="2">
            <MudButton Color="Color.Primary" Variant="Variant.Outlined" Size="Size.Medium" StartIcon="@Icons.Material.Filled.Save" OnClick="CloseSave">@Loc["lbSave"]</MudButton>
        </MudItem>
    </MudGrid>

}


@code {
    [CascadingParameter]
    public Task<AuthenticationState> AuthState { get; set; }

    ImportGrExcel grItemUpdated = new ImportGrExcel();
    bool fixed_header = true;
    bool fixed_footer = false;
    private string searchString = "";
    private bool dense = true;
    private bool hover = true;
    private bool striped = true;
    private bool bordered = true;
    int counterId = 1;
    private string ImportedfileName = "";
    private string Importedfilesize = "";
    IList<IBrowserFile> files = new List<IBrowserFile>();

    List<ImportGrExcel> listImportGrExcel = new List<ImportGrExcel>();

    string UserName = "";

    private async void UploadFiles(IBrowserFile file)
    {
        ImportedfileName = file.Name;
        Importedfilesize = file.Size.ToString();
        files.Add(file);

        listImportGrExcel = new();
        var fileStream =file.OpenReadStream();
        var ms = new MemoryStream();
        await fileStream.CopyToAsync(ms);
        ms.Position = 0;
        ISheet sheet;
        var xsswb = new XSSFWorkbook(ms);
        sheet = xsswb.GetSheetAt(0);
        IRow hr = sheet.GetRow(0);
        for (var j = sheet.FirstRowNum + 1; j <= sheet.LastRowNum; j++)
        {
            var r = sheet.GetRow(j);
            ImportGrExcel importExcel = new();
            importExcel.Id = counterId;

            importExcel.DataEtd = r.GetCell(0).DateCellValue;
            importExcel.HourEtd = r.GetCell(5).DateCellValue.TimeOfDay;

            importExcel.Sender = NpoiExtension.GetFormattedCellValue(r.GetCell(1));
            importExcel.ContainerNo = NpoiExtension.GetFormattedCellValue(r.GetCell(2));
            importExcel.PickingStatus = NpoiExtension.GetFormattedCellValue(r.GetCell(4));
            importExcel.Material = NpoiExtension.GetFormattedCellValue(r.GetCell(6));
            importExcel.InvoiceNo = NpoiExtension.GetFormattedCellValue(r.GetCell(7));
            importExcel.PartNo = NpoiExtension.GetFormattedCellValue(r.GetCell(8));
            importExcel.CarNumber = NpoiExtension.GetFormattedCellValue(r.GetCell(10));
            importExcel.TotalPalletQty = (int)r.GetCell(11).NumericCellValue;
            importExcel.TotalQty = (int)r.GetCell(12).NumericCellValue;
            listImportGrExcel.Add(importExcel);
            counterId++;
        }
        StateHasChanged();

    }

    private async Task CloseSave()
    {
        List<ImportGrExcel> listGrExcel = new List<ImportGrExcel>();
        foreach (var excelItem in listImportGrExcel)
        {
            ImportGrExcel grExcel = new ImportGrExcel();         
            grExcel.DataEtd = excelItem.DataEtd;
            grExcel.HourEtd = excelItem.HourEtd;
            grExcel.Sender = excelItem.Sender;
            grExcel.ContainerNo = excelItem.ContainerNo;
            grExcel.PartNo = excelItem.PartNo;
            grExcel.Material = excelItem.Material;
            grExcel.InvoiceNo = excelItem.InvoiceNo;
            grExcel.TotalPalletQty = (int)excelItem.TotalPalletQty;
            grExcel.TotalQty = (int)excelItem.TotalQty;
            grExcel.Remark = excelItem.Remark;
            grExcel.CarNumber = excelItem.CarNumber;
            listGrExcel.Add(grExcel);
        }
        string linkCu = "api/CarAdviceGrTruckMainTable/ImportExcel";
        await httpClient.PostAsJsonAsync(linkCu, listGrExcel);
        navigationManager.NavigateTo("/GRcarAdvice", true);
    }

    private async Task CloseCancel()
    {
        navigationManager.NavigateTo("/GRcarAdvice", false);

    }

    private async void Edit(ImportGrExcel caForEdit)
    {
        var parameters = new DialogParameters { ["GrItemForEdit"] = caForEdit };
        var dialog = DialogService.Show<GREditNewImportExcelComponent>("", parameters);
        var result = await dialog.Result;
        if (!result.Cancelled)
        {
            grItemUpdated = (ImportGrExcel)result.Data;
            var indexOf = listImportGrExcel.IndexOf(listImportGrExcel.FirstOrDefault(p => p.Id == grItemUpdated.Id));
            listImportGrExcel[indexOf] = grItemUpdated;
            StateHasChanged();
        }
    }

    private async void Delete(ImportGrExcel caForDelete)
    {
        listImportGrExcel.Remove(caForDelete);
        StateHasChanged();
    }


    private Func<ImportGrExcel, int, string> _rowStyleFunc => (x, i) =>
       {
           // Skan OK
           //if (x.RemarksWh == "REFERENCE ALREADY UPLOADED!!!!")
           //    return "background-color:#f79f52";

           return "";
       };

    //async Task ReadExcelNpoi(InputFileChangeEventArgs e)
    //{
    //    listImportGrExcel = new();
    //    var fileStream = e.File.OpenReadStream();
    //    var ms = new MemoryStream();
    //    await fileStream.CopyToAsync(ms);
    //    ms.Position = 0;
    //    ISheet sheet;
    //    var xsswb = new XSSFWorkbook(ms);
    //    sheet = xsswb.GetSheetAt(0);
    //    IRow hr = sheet.GetRow(0);
    //    for (var j = sheet.FirstRowNum + 1; j <= sheet.LastRowNum; j++)
    //    {
    //        var r = sheet.GetRow(j);
    //        ImportGrExcel importExcel = new();
    //        importExcel.Id = counterId;

    //        importExcel.DataEtd = r.GetCell(0).DateCellValue; 
    //        importExcel.HourEtd = r.GetCell(5).DateCellValue.TimeOfDay; 

    //        importExcel.Sender = NpoiExtension.GetFormattedCellValue(r.GetCell(1));
    //        importExcel.ContainerNo = NpoiExtension.GetFormattedCellValue(r.GetCell(2));
    //        importExcel.PickingStatus = NpoiExtension.GetFormattedCellValue(r.GetCell(4));
    //        importExcel.Material = NpoiExtension.GetFormattedCellValue(r.GetCell(6));
    //        importExcel.InvoiceNo = NpoiExtension.GetFormattedCellValue(r.GetCell(7));
    //        importExcel.PartNo = NpoiExtension.GetFormattedCellValue(r.GetCell(8));
    //        importExcel.CarNumber = NpoiExtension.GetFormattedCellValue(r.GetCell(10));
    //        importExcel.TotalPalletQty = (int)r.GetCell(11).NumericCellValue;
    //        importExcel.TotalQty = (int)r.GetCell(12).NumericCellValue;


    //        listImportGrExcel.Add(importExcel);

    //        counterId++;

    //        }
                             
    //    //string linkpostca = "/api/CarAdviceGrTruckMainTable/ImportExcel/";
    //    //var Response = await httpClient.PostAsJsonAsync<List<ImportGrExcel>>(linkpostca, listImportGrExcel);

    //}

    protected async override void OnInitialized()
    {
        var authState = await AuthState;
        var user = authState.User;
        if (!user.Identity.IsAuthenticated)
        {
            navigationManager.NavigateTo("/login");
        }
        else
        {
            UserName = user.FindFirst(d => d.Type == ClaimTypes.Name)?.Value;
        }
    }

 
    private bool FilterFunc(ImportGrExcel element)
    {
        if (string.IsNullOrWhiteSpace(searchString))
            return true;
        if (element.InvoiceNo.Contains(searchString, StringComparison.OrdinalIgnoreCase))
            return true;
        return false;
    }

}

<style>
    .mud-table-cell {
        padding: 0px !important;
        font-size: x-small !important;
        text-transform: uppercase !important;
        text-align: left !important;
    }

    .Nag {
        font-size: xx-small !important;
    }
</style>

