@using System.Security.Claims;
@using SCMDWH.Shared.Models;
@inject HttpClient httpClient
@inject NavigationManager navigationManager
@inject IDialogService DialogService
@inject ISnackbar Snackbar
@inject IStringLocalizer<CultureExample2> Loc
<style>
    .mud-input {
        height: 0.6rem !important;
        font: 100;
        font-size: medium;
        font-weight:500;
    }

    .form-control {
        font-size: x-small !important;
        font-weight:600;
    }
</style>



<MudGrid Style="background-color:#f8faf5!important">
    <MudItem xs="12">
        <MudAlert Severity="Severity.Normal" Style="background-color:#f8faf5!important" Dense="true" ContentAlignment="HorizontalAlignment.Center" Elevation="2">@Loc["lbGeneralWarehouseInfoprmation"]</MudAlert>
    </MudItem>
    <MudItem xs="2">
        <MudTextField @bind-Value="@CarAdviceMainTableWHEdit.Id" Label="Nr" Variant="Variant.Text" ReadOnly="true"></MudTextField>
    </MudItem>
    <MudItem xs="2">
        <MudTextField @bind-Value="@CarAdviceMainTableWHEdit.Shipment" Label=@Loc["lbShipment"] Variant="Variant.Text"></MudTextField>
    </MudItem>
    <MudItem xs="2">
        <MudTextField @bind-Value="@CarAdviceMainTableWHEdit.Reference" Label=@Loc["lbReference"] Variant="Variant.Text"></MudTextField>
    </MudItem>
    <MudItem xs="2">
        <MudDatePicker Label=@Loc["lbAdDate"] @bind-Date=" CarAdviceMainTableWHEdit.AdviceDate" DisableToolbar="true" />
    </MudItem>
    <MudItem xs="2">
        <MudDatePicker Label=@Loc["lbEtdDate"] @bind-Date="EtdTimeDate" DisableToolbar="true" />
    </MudItem>
    <MudItem xs="2">
        <MudTimePicker Label=@Loc["lbEtdTime"] AmPm="true" @bind-Time="EtdTimeTime" DisableToolbar="true" />
    </MudItem>
    <MudItem xs="1">
        <MudAutocomplete Margin="Margin.None" Dense="true" T="string" Label=@Loc["lbDestination"] @bind-Value="CarAdviceMainTableWHEdit.Destination" SearchFunc="@SearchDestination"
                         ResetValueOnEmptyText="@resetValueOnEmptyText" />
    </MudItem>
    <MudItem xs="2">
        <MudAutocomplete Margin="Margin.None" Dense="true" T="string" Label=@Loc["lbCurriers"] @bind-Value="CarAdviceMainTableWHEdit.Forwarder" SearchFunc="@SearchCurriers"
                         ResetValueOnEmptyText="@resetValueOnEmptyText" />

    </MudItem>

    <MudItem xs="2">
        <MudAutocomplete Margin="Margin.None" Dense="true" T="string" Label=@Loc["lbClient"] @bind-Value="CarAdviceMainTableWHEdit.Client" SearchFunc="@SearchClient"
                         ResetValueOnEmptyText="@resetValueOnEmptyText" />
    </MudItem>
    <MudItem xs="7">
      
    </MudItem>
</MudGrid>

<MudGrid Style="background-color:#f0fafa!important">
    <MudItem xs="12">
        <MudAlert Severity="Severity.Normal" Style="background-color:#f0fafa!important" Dense="true" ContentAlignment="HorizontalAlignment.Center" Elevation="1">@Loc["lbWarehouseinformation"]</MudAlert>

    </MudItem>

    <MudItem xs="2">
        <MudTextField @bind-Value="@CarAdviceMainTableWHEdit.TruckPlatesWh" Label=@Loc["lbTruckplatesWH"] Variant="Variant.Text"></MudTextField>
    </MudItem>
    <MudItem xs="2">
        <MudTextField @bind-Value="@CarAdviceMainTableWHEdit.DriverWh" Label=@Loc["lbDriverWH"] Variant="Variant.Text"></MudTextField>
    </MudItem>
    <MudItem xs="2">
        <MudAutocomplete Class="KombiTest" Margin="Margin.None" Dense="true" T="string" Label=@Loc["lbPickingstatus"] @bind-Value="CarAdviceMainTableWHEdit.PickingStatus" SearchFunc="@SearchPickingStatus"
                         ResetValueOnEmptyText="@resetValueOnEmptyText"  />
    </MudItem>
    <MudItem xs="2">
        <MudDatePicker Label=@Loc["lbPickingdate"] @bind-Date="PickingTimeDate" DisableToolbar="true" />
    </MudItem>
    <MudItem xs="2">
        <MudTimePicker Label=@Loc["lbPickingtime"] AmPm="true" @bind-Time="PickingTimeTime" DisableToolbar="true" />
    </MudItem>
    <MudItem xs="2">
        <MudDatePicker Label=@Loc["lbScanneddate"] @bind-Date="ScannedTimeDate" DisableToolbar="true" />
    </MudItem>
    <MudItem xs="2">
        <MudTimePicker Label=@Loc["lbScannedtime"] AmPm="true" @bind-Time="ScannedTimeTime" DisableToolbar="true" />
    </MudItem>
    <MudItem xs="3">
        <MudAutocomplete Margin="Margin.None" Dense="true" T="string" Label=@Loc["lbReason"] @bind-Value="CarAdviceMainTableWHEdit.FgDelayReason" SearchFunc="@SearchFGDelayReason"
                         ResetValueOnEmptyText="@resetValueOnEmptyText" />
    </MudItem>
    <MudItem xs="1">
        <MudTextField @bind-Value="@CarAdviceMainTableWHEdit.LoadingDock" Label=@Loc["lbDock"] Variant="Variant.Text"></MudTextField>
    </MudItem>
    <MudItem xs="2">
        <MudDatePicker Label=@Loc["lbleftdockdate"] @bind-Date="LeftDockTimeDate" DisableToolbar="true" />
    </MudItem>
    <MudItem xs="2">
        <MudTimePicker Label=@Loc["leftdocktime"] AmPm="true" @bind-Time="LeftDockTimeTime" DisableToolbar="true" />
    </MudItem>
    <MudItem xs="2">
        <MudTextField @bind-Value="@CarAdviceMainTableWHEdit.EntryByWh" Label=@Loc["lbEntrybyWH"] Variant="Variant.Text"></MudTextField>
    </MudItem>
    <MudItem xs="2">
        <MudTextField @bind-Value="@CarAdviceMainTableWHEdit.RemarksWh" Label=@Loc["lbRemarkWH"] Variant="Variant.Text"></MudTextField>
    </MudItem>
    <MudItem xs="10">
       
    </MudItem>
</MudGrid>


<MudAlert Severity="Severity.Normal" Style="background-color:#fcf0ed!important" Dense="true" ContentAlignment="HorizontalAlignment.Center" Elevation="1">@Loc["lbSecurityinfo"]</MudAlert>

<hr />

<div class="container-fluid" style="font-size:xx-small!important">
    <div class="row row-cols-6">
        <div class="col"> <input type="email" class="form-control" id="exampleFormControlInput1" placeholder="Ata" readonly value=" @Loc["lbAta"]:  @AtaTimeDate" /> </div>
        <div class="col"><input type="email" class="form-control" id="exampleFormControlInput1" placeholder="Ata" readonly value="@Loc["lbQuality"]:  @CarAdviceMainTableWHEdit.Quality " /></div>
        <div class="col"><input type="email" class="form-control" id="exampleFormControlInput1" placeholder="Ata" readonly value="@Loc["lbTruckType"]: @CarAdviceMainTableWHEdit.TruckType" /> </div>
        <div class="col"><input type="email" class="form-control" id="exampleFormControlInput1" placeholder="Ata" readonly value=" @Loc["lbPlates"]:  @CarAdviceMainTableWHEdit.TruckPlatesS" /> </div>
        <div class="col"><input type="email" class="form-control" id="exampleFormControlInput1" placeholder="Ata" readonly value=" @Loc["lbDriverS"]:  @CarAdviceMainTableWHEdit.DriverS " /></div>
        <div class="col"><input type="email" class="form-control" id="exampleFormControlInput1" placeholder="Ata" readonly value=" @Loc["lbEnTime"]:  @CarAdviceMainTableWHEdit.TpvEnterTime " /></div>
    </div>

    <div class="row row-cols-4">
        <div class="col"><input type="email" class="form-control" id="exampleFormControlInput1" placeholder="Ata" readonly value=" @Loc["lbCallBy"]:  @CarAdviceMainTableWHEdit.CallBy" /> </div>
        <div class="col"><input type="email" class="form-control" id="exampleFormControlInput1" placeholder="Ata" readonly value="@Loc["lbEntryByS"]:  @CarAdviceMainTableWHEdit.EntryByS " /> </div>
        <div class="col"><input type="email" class="form-control" id="exampleFormControlInput1" placeholder="Ata" readonly value="@Loc["lbRemarksS"]:  @CarAdviceMainTableWHEdit.RemarksS " /></div>
        <div class="col"><input type="email" class="form-control" id="exampleFormControlInput1" placeholder="Ata" readonly value="@Loc["lbTpvExitTime"]:  @CarAdviceMainTableWHEdit.TpvExitTime " /></div>
    </div>
</div>
<hr />

<MudGrid>
    <MudItem xs="6">

    </MudItem>


    <MudItem xs="2">
        <MudButton Variant="Variant.Filled" StartIcon="@Icons.Material.Filled.Delete" Color="Color.Error" Size="Size.Small" OnClick="DeleteWh">@Loc["lbDelete"]</MudButton>
    </MudItem>

    <MudItem xs="2">
        <MudButton Variant="Variant.Filled" StartIcon="@Icons.Material.Filled.Cancel" Size="Size.Small" OnClick="CancelButton">@Loc["lbCancel"]</MudButton>
    </MudItem>

    <MudItem xs="2">
        <MudButton Variant="Variant.Filled" StartIcon="@Icons.Material.Filled.Save" Size="Size.Small" OnClick="SaveWh">@Loc["lbSave"]</MudButton>
    </MudItem>
</MudGrid>

@code {
    [CascadingParameter]
    public Task<AuthenticationState> AuthState { get; set; }

    [Parameter]
    public string Id { get; set; }

    [Parameter]
    public EventCallback<string> DeleteItemWH { get; set; }

    CarAdviceMainTable CarAdviceMainTableWHEdit = new CarAdviceMainTable();

    private bool resetValueOnEmptyText;
    string UserName = "";

    List<CarAdviceDictionaryCustomers> customerList = new List<CarAdviceDictionaryCustomers>();
    private List<string> customers;


    List<CarAdviceDictionaryCountryCode> destinationList = new List<CarAdviceDictionaryCountryCode>();
    private List<string> destination;

    List<CarAdviceDictionaryCarriers> currierList = new List<CarAdviceDictionaryCarriers>();
    private List<string> curriers;

    List<CarAdviceDictionaryStatus> PickingStatusList = new List<CarAdviceDictionaryStatus>();
    private List<string> PickingStatus;

    List<CarAdviceDictionaryReason> FG_DelayReasonList = new List<CarAdviceDictionaryReason>();
    private List<string> FG_DelayReason;

    List<CarAdviceDictionaryQuality> qualityList = new List<CarAdviceDictionaryQuality>();
    private List<string> quality;

    List<CarAdviceDictionaryTruckType> truckTypeList = new List<CarAdviceDictionaryTruckType>();
    private List<string> trucktype;

    DateTime? LeftDockTimeDate;
    TimeSpan? LeftDockTimeTime;

    DateTime? EtdTimeDate;
    TimeSpan? EtdTimeTime;

    DateTime? PickingTimeDate;
    TimeSpan? PickingTimeTime;

    DateTime? ScannedTimeDate;
    TimeSpan? ScannedTimeTime;

    DateTime? AtaTimeDate;
    TimeSpan? AtaTimeTime;

    DateTime? TPVEntryTimeDate;
    TimeSpan? TPVEntryTimeTime;

    DateTime? TPVExitTimeDate;
    TimeSpan? TPVExitTimeTime;




    private async Task SaveWh()
    {

        if (CarAdviceMainTableWHEdit.PickingStatus == "Picking")
        {

            CarAdviceMainTableWHEdit.PickingTime = DateTime.Now;
        }

        if (CarAdviceMainTableWHEdit.PickingStatus == "Sent")
        {

            CarAdviceMainTableWHEdit.LeftTheDockTime = DateTime.Now;
        }

        // Picking date
        //if (PickingTimeDate != null)
        //{
        //    DateTime PickingTimeDateNotNulable = (DateTime)PickingTimeDate;
        //    TimeSpan PickingTimeTimeNotNulable = (TimeSpan)PickingTimeTime;
        //    CarAdviceMainTableWHEdit.PickingTime = PickingTimeDateNotNulable.Add(PickingTimeTimeNotNulable);
        //}
        //// left dock date mapped by SENT -> pisking status 
        //if (LeftDockTimeDate != null)
        //{
        //    DateTime LeftDockTimeDateNotNulable = (DateTime)LeftDockTimeDate;
        //    TimeSpan LeftDockTimeTimeNotNulable = (TimeSpan)LeftDockTimeTime;
        //    CarAdviceMainTableWHEdit.LeftTheDockTime = LeftDockTimeDateNotNulable.Add(LeftDockTimeTimeNotNulable);
        //}


        //---------------------------------------------
      
      
        // Scanned Time
        if (ScannedTimeDate != null)
        {
            DateTime ScannedTimeDateNotNulable = (DateTime)ScannedTimeDate;
            TimeSpan ScannedTimeTimeNotNulable = (TimeSpan)ScannedTimeTime;
            CarAdviceMainTableWHEdit.ScannedTime = ScannedTimeDateNotNulable.Add(ScannedTimeTimeNotNulable);
        }

        //  LeftTheDockTime

        


        if (EtdTimeDate != null)
        {
            DateTime EtdTimeDateNotNulable = (DateTime)EtdTimeDate;
            TimeSpan EtdTimeTimeNotNulable = (TimeSpan)EtdTimeTime;
            CarAdviceMainTableWHEdit.Etd = EtdTimeDateNotNulable.Add(EtdTimeTimeNotNulable);

        }

        if (AtaTimeDate != null)
        {
            DateTime AtaTimeDateNotNulable = (DateTime)AtaTimeDate;
            TimeSpan AtaTimeTimeNotNulable = (TimeSpan)AtaTimeTime;
            CarAdviceMainTableWHEdit.Ata = AtaTimeDateNotNulable.Add(AtaTimeTimeNotNulable);
        }

        if (TPVEntryTimeDate != null)
        {
            DateTime TPVEntryTimeDateNotNulable = (DateTime)TPVEntryTimeDate;
            TimeSpan TPVEntryTimeTimeNotNulable = (TimeSpan)TPVEntryTimeTime;
            CarAdviceMainTableWHEdit.TpvEnterTime = TPVEntryTimeDateNotNulable.Add(TPVEntryTimeTimeNotNulable);
        }

        if (TPVExitTimeDate != null)
        {
            DateTime TPVExitTimeDateNotNulable = (DateTime)TPVExitTimeDate;
            TimeSpan TPVExitTimeTimeNotNulable = (TimeSpan)TPVExitTimeTime;
            CarAdviceMainTableWHEdit.TpvExitTime = TPVExitTimeDateNotNulable.Add(TPVExitTimeTimeNotNulable);
        }

        string linkSave = "/api/CarAdviceMainTables/" + CarAdviceMainTableWHEdit.Id;
        var Response = await httpClient.PutAsJsonAsync<CarAdviceMainTable>(linkSave, CarAdviceMainTableWHEdit);

        await DeleteItemWH.InvokeAsync("Save");

    }

    private async Task CancelButton()
    {
        await DeleteItemWH.InvokeAsync("Cancel");
    }

    private async Task DeleteWh()
    {


        var parameters = new DialogParameters();
        parameters.Add("ContentText", $"Do you really want to delete Item {Id}? This process cannot be undone.");
        parameters.Add("ButtonText", "Delete");
        parameters.Add("Color", Color.Error);
        var options = new DialogOptions() { CloseButton = false, MaxWidth = MaxWidth.ExtraSmall };
        var dialog = DialogService.Show<DialogUserDeleteComponent>("Delete", parameters, options);
        var result = await dialog.Result;
        if (!result.Cancelled)
        {
            string linkDel = "api/CarAdviceMainTables/" + Id;
            var Response = await httpClient.DeleteAsync(linkDel);
            if (Response.IsSuccessStatusCode)
            {
                LogAppReportingAction ilo = new LogAppReportingAction()
                    {
                        ActionType = "Item deleted",
                        ActionDetails = Id.ToString(),
                        ActionResult = "Success",
                        ActionTime = DateTime.Now,
                        ActrionTriggeredByUser = UserName
                    };
                await httpClient.PostAsJsonAsync("/api/LogAppReportingActions", ilo);

                //  Snackbar.Add("Item deleted " + Id, Severity.Info, config => { config.ShowCloseIcon = false; config.Icon = Icons.Rounded.DeleteForever; config.VisibleStateDuration = 500; });

                await DeleteItemWH.InvokeAsync("Deleted");
                StateHasChanged();

            }
            else
            {
                Snackbar.Add("Error !!!", Severity.Error, config => { config.ShowCloseIcon = false; config.Icon = Icons.Rounded.Error; config.VisibleStateDuration = 500; });
            }
        }

    }

    protected async override void OnInitialized()
    {
        var authState = await AuthState;
        var user = authState.User;
        if (!user.Identity.IsAuthenticated)
        {
            navigationManager.NavigateTo("/login");
        }
        else
        {
            UserName = user.FindFirst(d => d.Type == ClaimTypes.Name)?.Value;
        }


        // truck type

        string linktt = "/api/CarAdviceDictionaryTruckTypes/GetCarAdviceDictionaryActiveTruckType";
        truckTypeList = await httpClient.GetFromJsonAsync<List<CarAdviceDictionaryTruckType>>(linktt);
        trucktype = truckTypeList.Select(c => c.Truck).ToList();

        // quality

        string linkq = "/api/CarAdviceDictionaryQualities";
        qualityList = await httpClient.GetFromJsonAsync<List<CarAdviceDictionaryQuality>>(linkq);
        quality = qualityList.Select(c => c.Quality).ToList();

        // FG_reason for delay

        string linkRu = "/api/CarAdviceDictionaryReasons/GetCarAdviceDictionaryActiveReason";
        FG_DelayReasonList = await httpClient.GetFromJsonAsync<List<CarAdviceDictionaryReason>>(linkRu);
        FG_DelayReason = FG_DelayReasonList.Select(c => c.Code).ToList();

        // picking status

        string linkstat = "/api/CarAdviceDictionaryStatus/GetCarAdviceDictionaryActiveStatus";
        PickingStatusList = await httpClient.GetFromJsonAsync<List<CarAdviceDictionaryStatus>>(linkstat);
        PickingStatus = PickingStatusList.Select(c => c.Status).ToList();


        // curriers - forwarder

        string linkFo = "/api/CarAdviceDictionaryCarriers/GetCarAdviceActiveDictionaryCarriers";
        currierList = await httpClient.GetFromJsonAsync<List<CarAdviceDictionaryCarriers>>(linkFo);
        curriers = currierList.Select(c => c.Carrier).ToList();

        // destination - country code

        string linkDe = "/api/CarAdviceDictionaryCountryCodes";
        destinationList = await httpClient.GetFromJsonAsync<List<CarAdviceDictionaryCountryCode>>(linkDe);
        destination = destinationList.Select(c => c.Country).ToList();

        // Customers

        string linkCu = "/api/CarAdviceDictionaryCustomers/GetCarAdviceDictionaryActiveCustomer";
        customerList = await httpClient.GetFromJsonAsync<List<CarAdviceDictionaryCustomers>>(linkCu);
        customers = customerList.Select(c => c.Customer).ToList();


        await ReadData();


        if (CarAdviceMainTableWHEdit.Etd == null)
        {
            EtdTimeDate = null;
            EtdTimeTime = null;
        }
        else
        {
            EtdTimeDate = CarAdviceMainTableWHEdit.Etd;
            EtdTimeTime = Convert.ToDateTime(CarAdviceMainTableWHEdit.Etd).TimeOfDay;
        }

        // scnned time

        if (CarAdviceMainTableWHEdit.ScannedTime == null)
        {
            ScannedTimeDate = null;
            ScannedTimeTime = null;
        }
        else
        {
            ScannedTimeDate = CarAdviceMainTableWHEdit.ScannedTime;
            ScannedTimeTime = Convert.ToDateTime(CarAdviceMainTableWHEdit.ScannedTime).TimeOfDay;
        }

        // picking time

        if (CarAdviceMainTableWHEdit.PickingTime == null)
        {
            PickingTimeDate = null;
            PickingTimeTime = null;
        }
        else
        {
            PickingTimeDate = CarAdviceMainTableWHEdit.PickingTime;
            PickingTimeTime = Convert.ToDateTime(CarAdviceMainTableWHEdit.PickingTime).TimeOfDay;
        }

        // ledt dock time

        if (CarAdviceMainTableWHEdit.LeftTheDockTime == null)
        {
            LeftDockTimeDate = null;
            LeftDockTimeTime = null;
        }
        else
        {
            LeftDockTimeDate = CarAdviceMainTableWHEdit.LeftTheDockTime;
            LeftDockTimeTime = Convert.ToDateTime(CarAdviceMainTableWHEdit.LeftTheDockTime).TimeOfDay;
        }

        if (CarAdviceMainTableWHEdit.Ata == null)
        {
            AtaTimeDate = null;
            AtaTimeTime = null;
        }
        else
        {
            AtaTimeDate = CarAdviceMainTableWHEdit.Ata;
            AtaTimeTime = Convert.ToDateTime(CarAdviceMainTableWHEdit.Ata).TimeOfDay;
        }

        // TPV Entry Time

        if (CarAdviceMainTableWHEdit.TpvEnterTime == null)
        {
            TPVEntryTimeDate = null;
            TPVEntryTimeTime = null;
        }
        else
        {
            TPVEntryTimeDate = CarAdviceMainTableWHEdit.TpvEnterTime;
            TPVEntryTimeTime = Convert.ToDateTime(CarAdviceMainTableWHEdit.TpvEnterTime).TimeOfDay;
        }

        // TPV exit time

        if (CarAdviceMainTableWHEdit.TpvExitTime == null)
        {
            TPVExitTimeDate = null;
            TPVExitTimeTime = null;
        }
        else
        {
            TPVExitTimeDate = CarAdviceMainTableWHEdit.TpvExitTime;
            TPVExitTimeTime = Convert.ToDateTime(CarAdviceMainTableWHEdit.TpvExitTime).TimeOfDay;
        }
        StateHasChanged();

    }


    private async Task ReadData()
    {



        string linkForEdit = "/api/CarAdviceMainTables/" + Id;
        CarAdviceMainTableWHEdit = await httpClient.GetFromJsonAsync<CarAdviceMainTable>(linkForEdit);
    }


    private async Task<IEnumerable<string>> SearchClient(string value)
    {
        if (string.IsNullOrEmpty(value))
            return customers;
        return customers.Where(x => x.Contains(value, StringComparison.InvariantCultureIgnoreCase));
    }

    private async Task<IEnumerable<string>> SearchDestination(string value)
    {
        if (string.IsNullOrEmpty(value))
            return destination;
        return destination.Where(x => x.Contains(value, StringComparison.InvariantCultureIgnoreCase));
    }
    private async Task<IEnumerable<string>> SearchCurriers(string value)
    {
        if (string.IsNullOrEmpty(value))
            return curriers;
        return curriers.Where(x => x.Contains(value, StringComparison.InvariantCultureIgnoreCase));
    }

    private async Task<IEnumerable<string>> SearchPickingStatus(string value)
    {
 
        if (string.IsNullOrEmpty(value))
            return PickingStatus;
        return PickingStatus.Where(x => x.Contains(value, StringComparison.InvariantCultureIgnoreCase));
    }
    private async Task<IEnumerable<string>> SearchFGDelayReason(string value)
    {
        if (string.IsNullOrEmpty(value))
            return FG_DelayReason;
        return FG_DelayReason.Where(x => x.Contains(value, StringComparison.InvariantCultureIgnoreCase));
    }

    private async Task<IEnumerable<string>> SearchQuality(string value)
    {
        if (string.IsNullOrEmpty(value))
            return quality;
        return quality.Where(x => x.Contains(value, StringComparison.InvariantCultureIgnoreCase));
    }

    private async Task<IEnumerable<string>> SearchTuruckType(string value)
    {
        if (string.IsNullOrEmpty(value))
            return trucktype;
        return trucktype.Where(x => x.Contains(value, StringComparison.InvariantCultureIgnoreCase));
    }
}
