@page "/UserListPage";

@inject HttpClient httpClient
@inject NavigationManager navigationManager
@inject IDialogService DialogService
@inject ISnackbar Snackbar
@using SCMDWH.Client.Tools;
@using SCMDWH.Shared.Models;
@using SCMDWH.Client.JGHttpClient;
@using SCMDWH.Shared.Tools
@using System.Security.Claims;
@inject IStringLocalizer<CultureExample2> Loc

@inject JGHttpClient http;
@inject RecordLog rl;

@attribute [Authorize]

<style>

    .mud-data-grid .mud-table-cell .column-header .sortable-column-header {
        font-size: small !important;
    }

    .mud-table-cell {
        padding: 0px !important;
        font-size: small !important;
        text-transform: uppercase !important;
        text-align: left !important;
    }
</style>


<MudTable Items="@UserList" Dense="@dense" Hover="@hover" Bordered="@bordered" Striped="@striped" FixedFooter="true"
          FixedHeader="true" Height="38em" RowsPerPage="15" Filter="new Func<GlobalAppUsers,bool>(FilterFunc)">
    <ToolBarContent>
        <MudGrid Style="background-color:#f5f8f8">
            <MudItem xs="3">
                <MudButton Target="_blank" Variant="Variant.Filled" EndIcon="@Icons.Filled.NewLabel"
                           Style="text-transform:none " OnClick="AddNew" Size="Size.Large">
                    @Loc["lbAddnewitem"]
                </MudButton>
            </MudItem>
            <MudItem xs="4">
                <MudAlert Severity="Severity.Normal" Variant="Variant.Text">
                    <h5>User list </h5>
                </MudAlert>
            </MudItem>
            <MudItem xs="5">
                <MudTextField Variant="Variant.Outlined" @bind-Value="searchString" Adornment="Adornment.Start" AdornmentIcon="@Icons.Material.Filled.Search" IconSize="Size.Small" Class="mt-0"></MudTextField>
            </MudItem>
        </MudGrid>
    </ToolBarContent>
    <ColGroup>
        <col style="width: 1%;" />
        <col style="width: 10%; " />
        <col style="width: 15%;" />
        <col style="width: 5%;" />
        <col style="width: 15%;" />
        <col style="width: 1%;" />
        <col style="width: 1%;" />
        <col style="width: 1%;" />
        <col style="width: 10%;" />

    </ColGroup>
    <HeaderContent>
        <MudTh class="thcs">Roles</MudTh>
        <MudTh class="thcs"><MudTableSortLabel SortBy="new Func<GlobalAppUsers, object>(x=>x.UserName)">User Name</MudTableSortLabel></MudTh>
        <MudTh class="thcs">Email</MudTh>
        <MudTh class="thcs">Mobile</MudTh>
        <MudTh class="thcs">Created Time</MudTh>
        <MudTh class="thcs">Ac</MudTh>
        <MudTh class="thcs">Ext</MudTh>
        <MudTh class="thcs">Remark</MudTh>
        <MudTh class="thcs">Methods</MudTh>
    </HeaderContent>
    <RowTemplate>
        <MudTd DataLabel="Methods">
            <MudIconButton @onclick="@(()=>AddEditRights(@context.UserName))" Color="Color.Default" Icon="@Icons.Material.Filled.Group" Size="Size.Small" IconSize="Size.Small" />
        </MudTd>
        <MudTd DataLabel="User Name">@context.UserName</MudTd>
        <MudTd DataLabel="Email">@context.Email</MudTd>
        <MudTd DataLabel="Mobile">@context.Mobile</MudTd>

        <MudTd DataLabel="Created Time">@context.CreatedTime</MudTd>
        <MudTd DataLabel="Active">
            <MudCheckBox Size="Size.Small" ReadOnly="true" @bind-Checked="@context.Active"></MudCheckBox>
        </MudTd>
        <MudTd DataLabel="Active">
            <MudCheckBox Size="Size.Small" ReadOnly="true" @bind-Checked="@context.External"></MudCheckBox>
        </MudTd>
        <MudTd DataLabel="Remark">@context.Remark</MudTd>
        <MudTd DataLabel="Methods">
            <MudIconButton @onclick="@(()=>Edit(@context))" Color="Color.Default" Icon="@Icons.Material.Filled.Edit" Size="Size.Small" IconSize="Size.Small" />
            <MudIconButton @onclick="@(()=>Delete(@context))" Color="Color.Error" Icon="@Icons.Material.Filled.Delete" Size="Size.Small" IconSize="Size.Small" />
        </MudTd>
    </RowTemplate>
    <PagerContent>
        <MudTablePager />
    </PagerContent>
</MudTable>


@code {
    private bool dense = true;
    private bool hover = true;
    private bool striped = true;
    private bool bordered = true;
    private string searchString = "";
    private List<GlobalAppUsers> UserList = new List<GlobalAppUsers>();
    private string UserName = "";
    private string currentUser = "";


    //------------------------------------------------------------------------

    [CascadingParameter]
    public Task<AuthenticationState> AuthState { get; set; }


    [CascadingParameter]
    public Error Error { get; set; }


    // ---------- Nowy Grid

    private string _searchString;

    private Func<GlobalAppUsers, bool> _quickFilter => x =>
      {
          if (string.IsNullOrWhiteSpace(_searchString))
              return true;

          return false;

      };


    // ---------- Noniec nowy grid
    private void AddEditRights(string zmUsername)
    {
        var parameters = new DialogParameters { ["userName"] = zmUsername };
        DialogService.Show<DialogUserRolesComponent>("Simple Dialog ", parameters);
    }

    protected override async Task OnInitializedAsync()
    {
        var authState = await AuthState;
        var user = authState.User;
        currentUser = user.FindFirst(d => d.Type == ClaimTypes.Name)?.Value;

        try
        {
            UserList = await http.Get<List<GlobalAppUsers>>("/api/GlobalAppUsers/");
        }
        catch (Exception ex)
        {
            Snackbar.Add(ex.Message, Severity.Error, config => { config.ShowCloseIcon = false; config.Icon = Icons.Rounded.Error; config.VisibleStateDuration = 1500; });
        }
    }
    //------------------------------------------------------------------------
    private bool FilterFunc(GlobalAppUsers element)
    {
        if (string.IsNullOrWhiteSpace(searchString))
            return true;
        if (element.UserName.Contains(searchString, StringComparison.OrdinalIgnoreCase))
            return true;

        return false;
    }
    //------------------------------------------------------------------------
    private void AddNew()
    {
        navigationManager.NavigateTo($"/UserAddEditPage/0");
    }
    //------------------------------------------------------------------------
    private void Edit(GlobalAppUsers User)
    {
        navigationManager.NavigateTo($"/UserAddEditPage/{User.UserName}");
    }
    //------------------------------------------------------------------------
    private async void Delete(GlobalAppUsers user)
    {
        var parameters = new DialogParameters();
        parameters.Add("ContentText", $"Do you really want to delete user {user.UserName}? This process cannot be undone.");
        parameters.Add("ButtonText", "Delete");
        parameters.Add("Color", Color.Error);
        var options = new DialogOptions() { CloseButton = false, MaxWidth = MaxWidth.ExtraSmall };
        var dialog = DialogService.Show<DialogUserDeleteComponent>("Delete", parameters, options);
        var result = await dialog.Result;
        if (!result.Cancelled)
        {
            try
            {
                string link = "/api/GlobalAppUsers/" + user.UserName;
                var Res = await http.Delete<HttpResponseMessage>(link);
                // zapisanie log
                rl.RecordLogForLogAppReportingActions("Deleted user:" + user.UserName, currentUser);
                // odświerzanie listy uzytkowników 
                UserList = UserList.Where(u => u.UserName != user.UserName).ToList();
                StateHasChanged();
            }
            catch (Exception e)
            {
                Snackbar.Add(e.Message, Severity.Error, config => { config.ShowCloseIcon = false; config.Icon = Icons.Rounded.Error; config.VisibleStateDuration = 1500; });
            }
        }
    }
}


