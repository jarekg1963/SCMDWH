@page "/OperationLogPage"
@inject HttpClient httpClient
@inject NavigationManager navigationManager
@inject ISnackbar Snackbar
@inject IDialogService DialogService;

@using SCMDWH.Shared.Models;
@using System.Text.Json;

<style>
    .mud-data-grid .mud-table-cell .column-header .sortable-column-header {
        font-size: small !important;
    }
    .mud-table-cell {
        padding: 0px !important;
        font-size: small !important;
        text-transform: uppercase !important;
        text-align: left !important;
    }
</style>


<MudTable Items="@LogActivityList" Dense="@dense" Hover="@hover" Bordered="@bordered" Striped="@striped" FixedFooter="true"
          FixedHeader="true" Height="38em" RowsPerPage="25" Filter="new Func<LogAppReportingAction,bool>(FilterFunc)">
    <ToolBarContent>
        <MudGrid Style="background-color:#f5f8f8">
            <MudItem xs="3">
            </MudItem>
            <MudItem xs="4">
                <MudAlert Severity="Severity.Normal" Variant="Variant.Text">
                    <h5>Operation log </h5>
                </MudAlert>
            </MudItem>
            <MudItem xs="5">
                <MudTextField Variant="Variant.Outlined" @bind-Value="searchString" Adornment="Adornment.Start" AdornmentIcon="@Icons.Material.Filled.Search" IconSize="Size.Small" Class="mt-0"></MudTextField>
            </MudItem>
        </MudGrid>
    </ToolBarContent>
    <ColGroup>
        <col style="width: 1%;" />
        <col style="width: 10%; " />
        <col style="width: 10%;" />
        <col style="width: 10%;" />
        <col style="width: 10%;" />
        <col style="width: 10%;" />
        <col style="width: 1%;" />
        
    </ColGroup>
    <HeaderContent>
        <MudTh class="thcs"><MudTableSortLabel SortBy="new Func<LogAppReportingAction, object>(x=>x.Id)">Id</MudTableSortLabel></MudTh>
        <MudTh class="thcs"><MudTableSortLabel SortBy="new Func<LogAppReportingAction, object>(x=>x.ActionType)">ActionType</MudTableSortLabel></MudTh>
        <MudTh class="thcs"><MudTableSortLabel SortBy="new Func<LogAppReportingAction, object>(x=>x.ActionType)">ActionDetails</MudTableSortLabel></MudTh>
        <MudTh class="thcs"><MudTableSortLabel SortBy="new Func<LogAppReportingAction, object>(x=>x.ActionType)">ActionResult</MudTableSortLabel></MudTh>
        <MudTh class="thcs"><MudTableSortLabel SortBy="new Func<LogAppReportingAction, object>(x=>x.ActionType)">ActionTime</MudTableSortLabel></MudTh>
        <MudTh class="thcs"><MudTableSortLabel SortBy="new Func<LogAppReportingAction, object>(x=>x.ActionType)">ActrionTriggeredByUser</MudTableSortLabel></MudTh>
        <MudTh class="thcs">Operations</MudTh>
    </HeaderContent>
    <RowTemplate>
        <MudTd DataLabel="User Name">@context.Id</MudTd>
        <MudTd DataLabel="Email">@context.ActionType</MudTd>
        <MudTd DataLabel="Mobile">@context.ActionDetails.Substring(1,33)</MudTd>
        <MudTd DataLabel="Created Time">@context.ActionResult</MudTd>
        <MudTd DataLabel="Remark">@context.ActionTime</MudTd>
        <MudTd DataLabel="Remark">@context.ActrionTriggeredByUser</MudTd>
        <MudTd DataLabel="Methods">
            <MudIconButton @onclick="@(()=>ShowLogItem(@context))" Color="Color.Default" Icon="@Icons.Material.Filled.RemoveRedEye" Size="Size.Small" IconSize="Size.Small" />
           
        </MudTd>
    </RowTemplate>
    <PagerContent>
        <MudTablePager />
    </PagerContent>
</MudTable>

@code {

    private bool dense = true;
    private bool hover = true;
    private bool striped = true;
    private bool bordered = true;
    private string searchString = "";
    

    private List<LogAppReportingAction> LogActivityList = new List<LogAppReportingAction>();


    private async void ShowLogItem(LogAppReportingAction logItem)
    {
        //logDetaile = JsonSerializer.Deserialize<LogAppReportingAction>(logItem.ActionDetails);

        var parameters = new DialogParameters { ["Id"] = logItem.Id.ToString() };
        var dialog = DialogService.Show<OperationLogDetailComponent>("Log detail ", parameters);
     
   
    }


    protected override async Task OnInitializedAsync()
    {
        string link = "/api/LogAppReportingActions";
        try
        {
            LogActivityList = await httpClient.GetFromJsonAsync<List<LogAppReportingAction>>(link);
        }
        catch (Exception ex)
        {
            Snackbar.Add("Error " + ex.Message, Severity.Error, config => { config.ShowCloseIcon = false; config.Icon = Icons.Rounded.Transform; config.VisibleStateDuration = 500; });
        }
    }

    private bool FilterFunc(LogAppReportingAction element)
    {
        if (string.IsNullOrWhiteSpace(searchString))
            return true;
        if (element.ActionDetails.Contains(searchString, StringComparison.OrdinalIgnoreCase))
            return true;
        if (element.ActionType.Contains(searchString, StringComparison.OrdinalIgnoreCase))
            return true;
        if (element.ActrionTriggeredByUser.Contains(searchString, StringComparison.OrdinalIgnoreCase))
            return true;
        return false;
    }
}
