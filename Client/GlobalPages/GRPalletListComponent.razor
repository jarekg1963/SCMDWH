@page "/GrPalletList"
@using SCMDWH.Shared.Models;
@using SCMDWH.Shared.DTO;

@using System.Security.Claims;
@using SCMDWH.Shared.Tools;
@inject IStringLocalizer<CultureExample2> Loc
@inject NavigationManager navigationManager
@inject HttpClient httpClient
@inject IDialogService DialogService;

<MudDataGrid T="GrTruckItemsDTO" ColumnResizeMode="ResizeMode.Container" Dense="true" Hover="true" Bordered="true" Striped="true" FixedHeader="true" FixedFooter="true"
             Height="35em" RowsPerPage="35" MultiSelection="false" Items="@itemPaletList" SortMode="SortMode.Multiple" Filterable="true"
             FilterCaseSensitivity="DataGridFilterCaseSensitivity.CaseInsensitive">
    <ToolBarContent>
        <MudGrid>
            <MudItem xs="4">
                <h3>@Loc["lbPalletList"]</h3>
            </MudItem>
            <MudItem xs="3">
                <MudDateRangePicker DisableToolbar="true" IconSize="Size.Small" @ref="_picker" @bind-DateRange="_dateRange" AutoClose="@_autoClose">
                    <PickerActions>
                        <MudButton Class="mr-auto align-self-start" OnClick="@(() => _picker.Clear())">Clear</MudButton>
                        <MudButton OnClick="@(() => _picker.Close(false))">Cancel</MudButton>
                        <MudButton Color="Color.Primary" OnClick="SelectTimeFrameFromPicker">Ok</MudButton>
                    </PickerActions>
                </MudDateRangePicker>
            </MudItem>
            <MudItem xs="3">
           
            </MudItem>
        </MudGrid>
    </ToolBarContent>
                    

    <Columns>
   
        <TemplateColumn CellClass="d-flex justify-end" Title="Items" Filterable="false">
            <CellTemplate>
                <MudButton Size="@Size.Small" Variant="@Variant.Outlined" Color="@Color.Default" StartIcon="@Icons.Material.Filled.ViewList" @onclick="@(()=>EditGr(@context.Item.Id))"></MudButton>
            </CellTemplate>
        </TemplateColumn>
        <PropertyColumn Property="x => x.Id" Title="Id" Sortable="true" Filterable="false" />
        <PropertyColumn Property="x => x.EtdForDisplay" Title="@Loc["lbEtdDate"]" Sortable="true" Filterable="false" />
        <PropertyColumn Property="x => x.ContainerNo" Title="@Loc["lbContainer"]" Sortable="true" Filterable="true" />
        <PropertyColumn Property="x => x.PalletNo" Title="@Loc["lbPalletNo"]" Sortable="true" Filterable="true" />
        <PropertyColumn Property="x => x.Material" Title="Material" Sortable="true" Filterable="true" />
        <PropertyColumn Property="x => x.InvoiceNo" Title="Invoice" Sortable="true" Filterable="true" />
        <PropertyColumn Property="x => x.TotalPalletQty" Title="Pallet Qty" Sortable="true" Filterable="true" />
        <PropertyColumn Property="x => x.TotalPalletQty" Title="Pallet Qty" Sortable="true" Filterable="true" />
        <PropertyColumn Property="x => x.Remark" Title="Remark" Sortable="true" Filterable="true" />
        <PropertyColumn Property="x => x.WorkOrders" Title="WO" Sortable="true" Filterable="true" />
        <PropertyColumn Property="x => x.Transfer" Title="Transfer" Sortable="true" Filterable="true" />
    </Columns>
    <PagerContent>
        <MudDataGridPager T="GrTruckItemsDTO" />
    </PagerContent>
</MudDataGrid>

@code {
    List<GrTruckItemsDTO> itemPaletList = new();
    private bool _autoClose;
    private MudDateRangePicker _picker;
    GlobalAppUsersParameters userParametersGRDates = new();
    private DateRange _dateRange = new DateRange();
    private string UserName = "";
    [CascadingParameter]
    public Task<AuthenticationState> AuthState { get; set; }
    private DateTime ldGRStart;
    private DateTime ldGREnd;

    private async void EditGr(long iiid)
    {


        CarAdviceGrTruckItems updateItem = new CarAdviceGrTruckItems();
        var parameters = new DialogParameters { ["idForEdit"] = iiid };
        var dialog = DialogService.Show<GREditItemComponent>("", parameters);
        var result = await dialog.Result;
        if (!result.Cancelled)
        {
            if ((string)result.Data.ToString().Substring(0,6) == "Delete") 
            {
                string strIdForDel = (string)result.Data.ToString().Substring(6);
                string linkDel = "/api/CarAdviceGrTruckItemsControllery/" + strIdForDel;
                var Responsedel = await httpClient.DeleteAsync(linkDel);
                await ReadData();
                StateHasChanged();
                return;
            }            
            updateItem = (CarAdviceGrTruckItems)result.Data;
            string link = "/api/CarAdviceGrTruckItemsControllery/" + updateItem.Id;
            var Response = await httpClient.PutAsJsonAsync<CarAdviceGrTruckItems>(link, updateItem);
            await ReadData();
            StateHasChanged();
        }
    }

    protected override async Task OnInitializedAsync()
    {
        try
        {
            await ReadData();
            StateHasChanged();
        }
        catch (Exception ex)
        {
            //Error.ProcessError(ex);
        }
    }

    private async Task ReadData()
    {
        IEnumerable<Claim> claims = Enumerable.Empty<Claim>();
        var authState = await AuthState;
        var user = authState.User;
        if (!user.Identity.IsAuthenticated)
        {
            navigationManager.NavigateTo("/login");
        }
        else
        {
            UserName = user.FindFirst(d => d.Type == ClaimTypes.Name)?.Value;
            claims = user.Claims;
            string wszystkieRole = user.FindFirst(c => c.Type == ClaimTypes.Role)?.Value;

            //if (wszystkieRole.Contains("SECURITY")) rolaSecurity = true;
            //if (wszystkieRole.Contains("WH")) rolaWh = true;
        }

        // read users parameters

        string linkUserParameters = "/api/GlobalAppUsersParameters/" + UserName;


        userParametersGRDates = await httpClient.GetFromJsonAsync<GlobalAppUsersParameters>(linkUserParameters);

        if (userParametersGRDates == null)
        {
            ldGRStart = DateTime.Now.AddMonths(-3);
            ldGREnd = DateTime.Now;
        }
        else
        {
            ldGRStart = userParametersGRDates.DateGRMainCAFrom;
            ldGREnd = userParametersGRDates.DateGRMainCATo;
        }

        // end users parameters

        _dateRange = new DateRange(ldGRStart, ldGREnd);
        string linkLoad = "";
        linkLoad = "/api/CarAdviceGrTruckItemsControllery/GetbyDateNoSent/" + Helpers.ChangeDateToString(ldGRStart) + "/" + Helpers.ChangeDateToString(ldGREnd);

        //!!!!!!!!!!!!!! -- poprawic inna tabela GR---------
        itemPaletList = await httpClient.GetFromJsonAsync<List<GrTruckItemsDTO>>(linkLoad);


    }


    private async Task SelectTimeFrameFromPicker()
    {
        _picker.Close();
        userParametersGRDates.DateMainCAFrom = userParametersGRDates.DateMainCAFrom;
        userParametersGRDates.DateMainCATo = userParametersGRDates.DateMainCATo;
        userParametersGRDates.DateGRMainCAFrom = (DateTime)_dateRange.Start;
        userParametersGRDates.DateGRMainCATo = (DateTime)_dateRange.End;
        userParametersGRDates.UserName = UserName;
        string linkForPost = "api/GlobalAppUsersParameters";
        await httpClient.PostAsJsonAsync<GlobalAppUsersParameters>(linkForPost, userParametersGRDates);
        DateTime dStart = (DateTime)_dateRange.Start;
        DateTime dEnd = (DateTime)_dateRange.End;
        string linkLoad = "/api/CarAdviceGrTruckItemsControllery/GetbyDateNoSent/" + Helpers.ChangeDateToString(dStart) + "/" + Helpers.ChangeDateToString(dEnd);
        itemPaletList = await httpClient.GetFromJsonAsync<List<GrTruckItemsDTO>>(linkLoad);
        StateHasChanged();
    }
}


<style>
    .mud-data-grid .mud-table-cell .column-header .sortable-column-header {
        font-size: xx-small !important;
    }

    .mud-table-cell {
        padding: 0px !important;
        font-size: small !important;
        text-transform: uppercase !important;
        text-align: left !important;
    }

    @@media (min-width: 1080px) {
        .example {
            width: 1080px;
            margin-left: auto !important;
            margin-right: auto !important;
        }
    }
</style>