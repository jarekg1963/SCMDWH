@page "/caradvice"
@*@using System.Net.Http.Json*@
@using System.Text.Json.Serialization;
@using NPOI.SS.UserModel;
@using NPOI.XSSF.UserModel;
@using Newtonsoft.Json;
@using Newtonsoft.Json.Serialization;
@using SCMDWH.Client.GlobalPages;
@using SCMDWH.Client.Tools;
@using SCMDWH.Shared.Models;
@using System.Security.Claims;
@using System.Text.Json;
@using SCMDWH.Shared.Tools;
@inject HttpClient httpClient
@inject NavigationManager navigationManager
@inject IDialogService DialogService;
@inject ISnackbar Snackbar
@inject IStringLocalizer<CultureExample2> Loc
@inject RecordLog rl;
@inject IJSRuntime JSRuntime


<style>

    .mud-data-grid .mud-table-cell .column-header .sortable-column-header {
        font-size: xx-small!important;
    }
    .mud-table-cell {
        padding: 0px !important;
        font-size: small !important;
        text-transform: uppercase !important;
        text-align: left !important;
    }

 @@media (min-width: 1080px) {
    .example {
    width: 1080px;
    margin-left: auto!important;
    margin-right: auto!important;
  }
  }

</style>


@if (ListCAMainTable is null)
{
    <p>Loading </p>
}
else
{
    <MudTabs  Elevation="2" Rounded="true"  Centered="true" Class="my-6" Color="Color.Dark" @ref="tabs" >
        <MudTabPanel Icon="@Icons.Material.Filled.Api" Style="width:550px" Text=@Loc["lbCarAdvice"] BadgeData='"!"' BadgeColor="Color.Error" @ref="panel01" ID="@("pn_one")"
                 OnClick="Tab0Active">
            <MudDataGrid T="CarAdviceMainTable" ColumnResizeMode="ResizeMode.Container" Dense="true" Hover="true" Bordered="true" Striped="true" FixedHeader="true" FixedFooter="true"
                     Height="35em" RowsPerPage="30" MultiSelection="false" Items="@ListCAMainTable" SortMode="SortMode.Multiple" Filterable="true" QuickFilter="@_quickFilter"
                     RowClick="@RowClicked" RowStyleFunc="@_rowStyleFunc"  FilterCaseSensitivity="DataGridFilterCaseSensitivity.CaseInsensitive">
                <ToolBarContent >
                    <MudGrid >
                        <MudItem xs="2">
                            <MudButton Target="_blank" Variant="Variant.Text" EndIcon="@Icons.Material.Filled.ViewColumn" 
                            Style="text-transform:none ; margin-top:25px!important" OnClick="ShowColumsForSelection" Size="Size.Small">
                                @Loc["lbColumns"]
                            </MudButton>
                        </MudItem>
                        <MudItem xs="2">
                            <MudButton Target="_blank" Variant="Variant.Text" EndIcon="@Icons.Material.Filled.ImportExport"
                                   Style="text-transform:none ; margin-top:25px!important" OnClick="ImportFromExcel" Size="Size.Small">
                                Excel
                            </MudButton>
                        </MudItem>
                        <MudItem xs="2">
                            <MudButton Target="_blank" Variant="Variant.Text" EndIcon="@Icons.Material.Filled.AddToDrive"
                                   Style="text-transform:none ; margin-top:25px!important" OnClick="NewItemsCarAdviceMain" Size="Size.Small">
                               @Loc["lbNew"] 
                            </MudButton>
                        </MudItem>           
                        <MudItem xs="3">
                            <MudDateRangePicker DisableToolbar="true" IconSize="Size.Small" @ref="_picker"  @bind-DateRange="_dateRange" AutoClose="@_autoClose">
                                <PickerActions>
                                    <MudButton Class="mr-auto align-self-start" OnClick="@(() => _picker.Clear())">Clear</MudButton>
                                    <MudButton OnClick="@(() => _picker.Close(false))">Cancel</MudButton>
                                    <MudButton Color="Color.Primary" OnClick="SelectTimeFrameFromPicker" >Ok</MudButton>
                                </PickerActions>
                            </MudDateRangePicker>
                        </MudItem>              
                        <MudItem xs="3">
                            <MudCheckBox Style="margin-top:20px!important" Size="Size.Small" Dense="true" @bind-Checked="CheckTest">@Loc["lbPickingstatusCheckBox"]</MudCheckBox>
                    </MudItem>
                    </MudGrid>
                </ToolBarContent>
                 <Columns>
                    @if (@CultureInfo.CurrentCulture.Name == "pl-PL")
                    {
                     
                        @foreach (var ii in listGridColums)
                        {
                            @switch (ii.fieldName)
                            {
                                case "Id":
                                <PropertyColumn  Property="x => x.Id" Title="@ii.plHeader" Hidden="ii.filedHiden" Sortable="true" />
                                    break;
                                case "AdviceDate":
                                    <PropertyColumn Property="x => x.AdviceDate" Title="@ii.plHeader" Hidden="ii.filedHiden" Sortable="true" Filterable="false" />
                                    break;
                                case "FgDelayReason":
                                    <PropertyColumn Property="x => x.FgDelayReason" Title="@ii.plHeader" Hidden="ii.filedHiden" Sortable="true" />
                                    break;
                                case "PickingStatus":
                                    <PropertyColumn Property="x => x.PickingStatus" Title="@ii.plHeader" Hidden="ii.filedHiden" Sortable="true" >                                                                        
                                    </PropertyColumn>
                                    break;
                                case "Client":
                                    <PropertyColumn  Property="x => x.Client" Title="@ii.plHeader" Hidden="ii.filedHiden" Sortable="true" />
                                    break;
                                case "Shipment":
                                    <PropertyColumn Property="x => x.Shipment" Title="@ii.plHeader" Hidden="ii.filedHiden" Sortable="true" />
                                    break;
                                case "Reference":
                                    <PropertyColumn Property="x => x.Reference" Title="@ii.plHeader" Hidden="ii.filedHiden" Sortable="true" />
                                    break;
                                case "Destination":
                                    <PropertyColumn Property="x => x.Destination" Title="@ii.plHeader" Hidden="ii.filedHiden" Sortable="true" />
                                    break;
                                case "DriverWh":
                                    <PropertyColumn Property="x => x.DriverWh" Title="@ii.plHeader" Hidden="ii.filedHiden" Sortable="true" />
                                    break;
                                case "TruckPlatesWh":
                                    <PropertyColumn Property="x => x.TruckPlatesWh" Title="@ii.plHeader" Hidden="ii.filedHiden" Sortable="true" />
                                    break;
                                case "Forwarder":
                                    <PropertyColumn Property="x => x.Forwarder" Title="@ii.plHeader" Hidden="ii.filedHiden" Sortable="true" />
                                    break;
                                case "Etd":
                                    <PropertyColumn Property="x => x.Etd" Title="@ii.plHeader" Hidden="ii.filedHiden" Sortable="true" Filterable="false" />
                                    break;
                                case "EntryByWh":
                                    <PropertyColumn Property="x => x.EntryByWh" Title="@ii.plHeader" Hidden="ii.filedHiden" Sortable="true" />
                                    break;
                                case "RemarksWh":
                                    <PropertyColumn Property="x => x.RemarksWh" Title="@ii.plHeader" Hidden="ii.filedHiden" Sortable="true" />
                                    break;
                                case "Ata":
                                    <PropertyColumn Property="x => x.Ata" Title="@ii.plHeader" Hidden="ii.filedHiden" Sortable="true" Filterable="false" />
                                    break;
                                case "Quality":
                                    <PropertyColumn Property="x => x.Quality" Title="@ii.plHeader" Hidden="ii.filedHiden" Sortable="true" />
                                    break;
                                case "TruckType":
                                    <PropertyColumn Property="x => x.TruckType" Title="@ii.plHeader" Hidden="ii.filedHiden" Sortable="true" />
                                    break;
                                case "DriverS":
                                    <PropertyColumn Property="x => x.DriverS" Title="@ii.plHeader" Hidden="ii.filedHiden" Sortable="true" />
                                    break;
                                case "TpvEnterTime":
                                    <PropertyColumn Property="x => x.TpvEnterTime" Title="@ii.plHeader" Hidden="ii.filedHiden" Sortable="true" />
                                    break;
                                case "TpvExitTime":
                                    <PropertyColumn Property="x => x.TpvExitTime" Title="@ii.plHeader" Hidden="ii.filedHiden" Sortable="true" Filterable="false" />
                                    break;
                                case "LoadingDock":
                                    <PropertyColumn Property="x => x.LoadingDock" Title="@ii.plHeader" Hidden="ii.filedHiden" Sortable="true" />
                                    break;
                                case "CallBy":
                                    <PropertyColumn Property="x => x.CallBy" Title="@ii.plHeader" Hidden="ii.filedHiden" Sortable="true" />
                                    break;
                                case "RemarksS":
                                    <PropertyColumn Property="x => x.RemarksS" Title="@ii.plHeader" Hidden="ii.filedHiden" Sortable="true" />
                                    break;
                                case "EntryByS":
                                    <PropertyColumn Property="x => x.EntryByS" Title="@ii.plHeader" Hidden="ii.filedHiden" Sortable="true" />
                                    break;
                                case "LeftTheDockTime":
                                    <PropertyColumn Property="x => x.LeftTheDockTime" Title="@ii.plHeader" Hidden="ii.filedHiden" Sortable="true" Filterable="false" />
                                    break;
                                case "PickingTime":
                                    <PropertyColumn Property="x => x.PickingTime" Title="@ii.plHeader" Hidden="ii.filedHiden" Sortable="true" Filterable="false" />
                                    break;
                                case "ScannedTime":
                                    <PropertyColumn Property="x => x.ScannedTime" Title="@ii.plHeader" Hidden="ii.filedHiden" Sortable="true" Filterable="false" />
                                    break;
                                case "ForwarderInfo":
                                    <PropertyColumn Property="x => x.ForwarderInfo" Title="@ii.plHeader" Hidden="ii.filedHiden" Sortable="true" />
                                    break;
                                case "TruckPlatesS":
                                    <PropertyColumn Property="x => x.TruckPlatesS" Title="@ii.plHeader" Hidden="ii.filedHiden" Sortable="true" />
                                    break;
                            }         
                        }
                    }
                    else
                    {
                        @foreach (var ii in listGridColums)
                        {
                             @switch (ii.fieldName)
                            {
                                case "Id":
                                    <PropertyColumn Property="x => x.Id" Title="@ii.fieldName" Hidden="ii.filedHiden" Sortable="true" />
                                    break;
                                case "AdviceDate":
                                    <PropertyColumn Property="x => x.AdviceDate" Title="@ii.fieldName" Hidden="ii.filedHiden" Sortable="true" Filterable="false" />
                                    break;
                                case "FgDelayReason":
                                    <PropertyColumn Property="x => x.FgDelayReason" Title="@ii.fieldName" Hidden="ii.filedHiden" Sortable="true" />
                                    break;
                                case "PickingStatus":
                                    <PropertyColumn Property="x => x.PickingStatus" Title="@ii.fieldName" Hidden="ii.filedHiden" Sortable="true" />
                                    break;
                                case "Client":
                                    <PropertyColumn Property="x => x.Client" Title="@ii.fieldName" Hidden="ii.filedHiden" Sortable="true" />
                                    break;
                                case "Shipment":
                                    <PropertyColumn Property="x => x.Shipment" Title="@ii.fieldName" Hidden="ii.filedHiden" Sortable="true" />
                                    break;
                                case "Reference":
                                    <PropertyColumn Property="x => x.Reference" Title="@ii.fieldName" Hidden="ii.filedHiden" Sortable="true" />
                                    break;
                                case "Destination":
                                    <PropertyColumn Property="x => x.Destination" Title="@ii.fieldName" Hidden="ii.filedHiden" Sortable="true" />
                                    break;
                                case "DriverWh":
                                    <PropertyColumn Property="x => x.DriverWh" Title="@ii.fieldName" Hidden="ii.filedHiden" Sortable="true" />
                                    break;
                                case "TruckPlatesWh":
                                    <PropertyColumn Property="x => x.TruckPlatesWh" Title="@ii.fieldName" Hidden="ii.filedHiden" Sortable="true" />
                                    break;
                                case "Forwarder":
                                    <PropertyColumn Property="x => x.Forwarder" Title="@ii.fieldName" Hidden="ii.filedHiden" Sortable="true" />
                                    break;
                                case "Etd":
                                    <PropertyColumn Property="x => x.Etd" Title="@ii.fieldName" Hidden="ii.filedHiden" Sortable="true" />
                                    break;
                                case "EntryByWh":
                                    <PropertyColumn Property="x => x.EntryByWh" Title="@ii.fieldName" Hidden="ii.filedHiden" Sortable="true" />
                                    break;
                                case "RemarksWh":
                                    <PropertyColumn Property="x => x.RemarksWh" Title="@ii.fieldName" Hidden="ii.filedHiden" Sortable="true" />
                                    break;
                                case "Ata":
                                    <PropertyColumn Property="x => x.Ata" Title="@ii.fieldName" Hidden="ii.filedHiden" Sortable="true" Filterable="false" />
                                    break;
                                case "Quality":
                                    <PropertyColumn Property="x => x.Quality" Title="@ii.fieldName" Hidden="ii.filedHiden" Sortable="true" />
                                    break;
                                case "TruckType":
                                    <PropertyColumn Property="x => x.TruckType" Title="@ii.fieldName" Hidden="ii.filedHiden" Sortable="true" />
                                    break;
                                case "DriverS":
                                    <PropertyColumn Property="x => x.DriverS" Title="@ii.fieldName" Hidden="ii.filedHiden" Sortable="true" />
                                    break;
                                case "TpvEnterTime":
                                    <PropertyColumn Property="x => x.TpvEnterTime" Title="@ii.fieldName" Hidden="ii.filedHiden" Sortable="true" Filterable="false" />
                                    break;
                                case "TpvExitTime":
                                    <PropertyColumn Property="x => x.TpvExitTime" Title="@ii.fieldName" Hidden="ii.filedHiden" Sortable="true" Filterable="false" />
                                    break;
                                case "LoadingDock":
                                    <PropertyColumn Property="x => x.LoadingDock" Title="@ii.fieldName" Hidden="ii.filedHiden" Sortable="true" />
                                    break;
                                case "CallBy":
                                    <PropertyColumn Property="x => x.CallBy" Title="@ii.fieldName" Hidden="ii.filedHiden" Sortable="true" />
                                    break;
                                case "RemarksS":
                                    <PropertyColumn Property="x => x.RemarksS" Title="@ii.fieldName" Hidden="ii.filedHiden" Sortable="true" />
                                    break;
                                case "EntryByS":
                                    <PropertyColumn Property="x => x.EntryByS" Title="@ii.fieldName" Hidden="ii.filedHiden" Sortable="true" />
                                    break;
                                case "LeftTheDockTime":
                                    <PropertyColumn Property="x => x.LeftTheDockTime" Title="@ii.fieldName" Hidden="ii.filedHiden" Sortable="true" Filterable="false" />
                                    break;
                                case "PickingTime":
                                    <PropertyColumn Property="x => x.PickingTime" Title="@ii.fieldName" Hidden="ii.filedHiden" Sortable="true" Filterable="false" />
                                    break;
                                case "ScannedTime":
                                    <PropertyColumn Property="x => x.ScannedTime" Title="@ii.fieldName" Hidden="ii.filedHiden" Sortable="true" Filterable="false" />
                                    break;
                                case "ForwarderInfo":
                                    <PropertyColumn Property="x => x.ForwarderInfo" Title="@ii.fieldName" Hidden="ii.filedHiden" Sortable="true" />
                                    break;
                                case "TruckPlatesS":
                                    <PropertyColumn Property="x => x.TruckPlatesS" Title="@ii.fieldName" Hidden="ii.filedHiden" Sortable="true" />
                                    break;
                            }
                        }
                    }
                </Columns>
                <PagerContent>
                    <MudGrid>
                    <MudItem xs="2">
                        <MudButton Target="_blank" Variant="Variant.Text" EndIcon="@Icons.Material.Filled.Exposure"
                               Style="text-transform:none ; margin-top:10px!important" OnClick="ExportToExcel" Size="Size.Small">
                            @Loc["lbExportExcel"]
                        </MudButton>
                    </MudItem>
                    <MudItem xs="10">
                            <MudDataGridPager T="CarAdviceMainTable" PageSizeOptions="new int[] { 20, 50}" RowsPerPageString=@Loc["lbRowPerPage"] />
                        </MudItem>
                    </MudGrid>
                </PagerContent>
            </MudDataGrid>

</MudTabPanel>

        @if (rolaWh)
        {
            <MudTabPanel Icon="@Icons.Material.Filled.AccessTime" Style="width:550px" Text=@Loc["lbWarehouse"] BadgeDot="true" BadgeColor="Color.Error" @ref="panel03" ID="@("three")"
                 OnClick="Tab2Active">

                <CarAdviceMainWHComponentV2 Id="@selectedRow" DeleteItemWH="@ReturnFromWH"></CarAdviceMainWHComponentV2>
        </MudTabPanel>
        }
        @if(rolaSecurity)
        {
            <MudTabPanel Icon="@Icons.Material.Filled.AccessTime" Style="width:550px" Text=@Loc["lbSecurity"] BadgeDot="true" BadgeColor="Color.Error" OnClick="Tab3Active">
          
            <CarAdviceMainSecurityComponent Id="@selectedRow" DeleteItem="@ReturnFromSecurity"></CarAdviceMainSecurityComponent>
        </MudTabPanel>
        }
     
    </MudTabs>
}


@code {

    private DateTime ldStart;
    private DateTime ldEnd;
    GlobalAppUsersParameters userParametersDates = new();
    GlobalAppUsersParameters userParametersDatesForSave = new();

    private bool rolaWh = false;
    private bool rolaSecurity = false; 
    private string UserName = "";
    private string _searchString;
    private bool _sortNameByLength;
    private bool _autoClose;
    private string selectedRow = "";
    int clickCounter = 0;
    DateTime firstClickTime;

    List<gridColums> listGridColums = new();
    List<string> listColumnsWidth = new();

    private MudDateRangePicker _picker;
    private DateRange _dateRange = new DateRange();

    MudTabs tabs;
    MudTabPanel panel01;
    MudTabPanel panel02;
    MudTabPanel panel03;

    [CascadingParameter]
    public Error Error { get; set; }

    [CascadingParameter]
    public Task<AuthenticationState> AuthState { get; set; }

    #region hiddedcolumsdefinision

    private bool hiddenId = false;
    private bool hiddenAdviceDate = false;
    private bool hiddenFG_DelayReason = false;
    private bool hiddenPickingStatus = false;
    private bool hiddenClient = false;
    private bool hiddenShipment = false;
    private bool hiddenReference = false;
    private bool hiddenDestination = false;
    private bool hiddenDriverWh = false;
    private bool hiddenTruckPlatesWh = false;
    private bool hiddenForwarder = false;
    private bool hiddenForwarderInfo = false;
    private bool hiddenEtd = false;
    private bool hiddenEntryByWh = false;
    private bool hiddenRemarksWh = false;
    private bool hiddenAta = false;
    private bool hiddenQuality = false;
    private bool hiddenTruckType = false;
    private bool hiddenDriverS = false;
    private bool hiddenTruckPlatesS = false;
    private bool hiddenTpvEnterTime = false;
    private bool hiddenTpvExitTime = false;
    private bool hiddenLoadingDock = false;
    private bool hiddenCallBy = false;
    private bool hiddenRemarksS = false;
    private bool hiddenEntryByS = false;
    private bool hiddenLeftTheDockTime = false;
    private bool hiddenPickingTime = false;
    private bool hiddenScannedTime = false;

    #endregion hiddedcolumsdefinision

    List<CarAdviceMainPlanColumn> columsForDisplayListDb = new List<CarAdviceMainPlanColumn>();
    List<CarAdviceMainTable> ListCAMainTable = new List<CarAdviceMainTable>();
    List<clickInterval> clickVerification = new List<clickInterval>();

    private List<string> _events = new();

    // ListCAMainTable



    private bool _checkTest;

    private bool CheckTest
    {
        get { return _checkTest; }
        set { _checkTest = value; HandleCheck(value); }
    }

    async void HandleCheck(bool IsChecked)
    {

        if (IsChecked)
            await ReadData(true);
        if (!IsChecked)
            await ReadData(false);

    }


    private async void ExportToExcel()
    {
        StateHasChanged();
        var response = await httpClient.GetAsync("/api/Raport/ReportToExcel/" + UserName);
        response.EnsureSuccessStatusCode();
        var fileBytes = await response.Content.ReadAsByteArrayAsync();
        var fileName = $"CarAdviceData{DateTime.Now.ToString("yyyy-MM-dd", System.Globalization.CultureInfo.InvariantCulture)}.xlsx";
        await JSRuntime.InvokeAsync<object>("saveAsFile", fileName, Convert.ToBase64String(fileBytes));
        StateHasChanged();
    }


    private void ImportFromExcel()
    {
        navigationManager.NavigateTo("/NewCAfromExcel");
    }


    private Func<CarAdviceMainTable, int, string> _rowStyleFunc => (x, i) =>
      {
          // Skan OK
          if (x.PickingStatus == "Scan OK")
              return "background-color:#c0f752" ;


          //Picking
          if (x.PickingStatus == "Picking")
              return "background-color:#fcba03"; 

          //Picking
          if (x.PickingStatus == "Loading")
              return "background-color:#52d1f7";

          // Szaey -- Paper work Paper work

          if (x.PickingStatus == "Paper work")
              return "background-color:#CDCDCD";

          // Ciemno zielony - sent
          if (x.PickingStatus == "Sent")
              return "background-color:#22c738";

          // Cancelled - czerwony 
          if (x.PickingStatus == "Cancelled")
              return "background-color:#e65e69";

          return "";

      };


    public  void ReturnFromWH(string returnedWHAction)
    {   
        tabs.ActivatePanel(0);
        if (returnedWHAction == "Deleted")
        {
            navigationManager.NavigateTo("/caradvice", true);
        }

        if (returnedWHAction == "Save")
        {
            navigationManager.NavigateTo("/caradvice", true);
        }


    }


    public  void ReturnFromSecurity(string returnedSecurityAction)
    {
        tabs.ActivatePanel(0);
        navigationManager.NavigateTo("/caradvice", true);

    }


    public  void ReturnFromAdmin(string returnedAdminAction)
    {
        tabs.ActivatePanel(0);
        StateHasChanged();

    }


    private  void Tab0Active()
    {
        StateHasChanged();
    }

    private void Tab1Active()
    {
        string strlbPleaseSelectRow = Loc["lbPleaseSelectRow"];

        if (selectedRow== "") 
        {
            tabs.ActivatePanel(0);
            Snackbar.Add( strlbPleaseSelectRow , Severity.Error, config => { config.ShowCloseIcon = false; config.Icon = Icons.Rounded.ImportantDevices; config.VisibleStateDuration = 500; });
        }

    }
    private void Tab2Active()
    {
        string strlbPleaseSelectRow = Loc["lbPleaseSelectRow"];
        string strlbYoumustbeWH = Loc["lbYoumustbeWH"];

        if (!rolaWh)
        {
            tabs.ActivatePanel(0);
            Snackbar.Add(strlbYoumustbeWH, Severity.Error, config => { config.ShowCloseIcon = false; config.Icon = Icons.Rounded.ImportantDevices; config.VisibleStateDuration = 500; });
        }

        if (selectedRow == "")
        {
            tabs.ActivatePanel(0);
            Snackbar.Add(strlbPleaseSelectRow, Severity.Error, config => { config.ShowCloseIcon = false; config.Icon = Icons.Rounded.ImportantDevices; config.VisibleStateDuration = 500; });
        }


    }
    private void Tab3Active()
    {
        string strlbPleaseSelectRow = Loc["lbPleaseSelectRow"];
        string strYouMustBeSECURITY = Loc["lbYouMustBeSECURITY"];

        if (!rolaSecurity)
        {
            tabs.ActivatePanel(0);
            Snackbar.Add(strYouMustBeSECURITY, Severity.Error, config => { config.ShowCloseIcon = false; config.Icon = Icons.Rounded.ImportantDevices; config.VisibleStateDuration = 500; });
        }
        if (selectedRow == "")
        {
            tabs.ActivatePanel(0);
            Snackbar.Add(strlbPleaseSelectRow, Severity.Error, config => { config.ShowCloseIcon = false; config.Icon = Icons.Rounded.ImportantDevices; config.VisibleStateDuration = 500; });
        }
    }


    private async Task NewItemsCarAdviceMain()
    {
        CarAdviceMainTable CarAdviceMainTableNewForSave = new CarAdviceMainTable();
        CarAdviceMainTable CarAdviceMainTablejsonCamel = new CarAdviceMainTable();
        var parameters = new DialogParameters { ["Id"] = "XXX" };
        var dialog = DialogService.Show<NewCarAdviceMainComponent>("", parameters);
        var result = await dialog.Result;
        if (!result.Cancelled)
        {
            CarAdviceMainTableNewForSave = (CarAdviceMainTable)result.Data;

            string linkAddNew = "/api/CarAdviceMainTables";
            var response = await httpClient.PostAsJsonAsync<CarAdviceMainTable>(linkAddNew, CarAdviceMainTableNewForSave);
            // zamiana jsona Camel na Pascal 
            var jsonResposeWithId = await response.Content.ReadAsStringAsync();
            CarAdviceMainTablejsonCamel = JsonConvert.DeserializeObject<CarAdviceMainTable>(jsonResposeWithId);
            string jsonStringCANew = System.Text.Json.JsonSerializer.Serialize(CarAdviceMainTablejsonCamel);

            rl.RecordOperationLog("New item",
            jsonStringCANew,
            UserName,"Success");

            await ReadData(false);
            StateHasChanged();
        }

    }
    private async Task SelectTimeFrameFromPicker()
    {

        _picker.Close();

        // Save dates in table GlobalAppUsersParameters

        userParametersDates.DateMainCAFrom = (DateTime)_dateRange.Start;
        userParametersDates.DateMainCATo = (DateTime)_dateRange.End;
        userParametersDates.DateGRMainCAFrom = userParametersDates.DateGRMainCAFrom;
        userParametersDates.DateGRMainCATo = userParametersDates.DateGRMainCATo;
        userParametersDates.UserName = UserName;

        // Action in Controller update table above class coltroller check if excist -> put if not post 

        // POST api/GlobalAppUsersParameters

        string linkForPost = "api/GlobalAppUsersParameters";
        await httpClient.PostAsJsonAsync<GlobalAppUsersParameters>(linkForPost, userParametersDates);


        DateTime dStart = (DateTime)_dateRange.Start;
        DateTime dEnd = (DateTime)_dateRange.End;
        string linkzDates = "/api/CarAdviceMainTables/GetbyDate/" + Helpers.ChangeDateToString(dStart) + "/" +  Helpers.ChangeDateToString(dEnd);
        ListCAMainTable = await httpClient.GetFromJsonAsync<List<CarAdviceMainTable>>(linkzDates);
        StateHasChanged();
    }



    private async Task ShowColumsForSelection()
    {
        var parameters = new DialogParameters { ["Username"] = UserName };
        var dialog = DialogService.Show<DialogColumnsSelectionMainV2>("",parameters);
        var result = await dialog.Result;

        if (!result.Cancelled)
        {
            navigationManager.NavigateTo("/caradvice",true);
            StateHasChanged();
        }
    }


    void RowClicked(DataGridRowClickEventArgs<CarAdviceMainTable> args)
    {

        //if (rolaAdmin) tabs.ActivatePanel(1);
        if (rolaSecurity) tabs.ActivatePanel(1);
        if (rolaWh) tabs.ActivatePanel(1);
        selectedRow = args.Item.Id.ToString();
        Console.WriteLine("Click z Row clicked ");

    }


    private Func<CarAdviceMainTable, bool> _quickFilter => x =>
       {
           if (string.IsNullOrWhiteSpace(_searchString))
               return true;

           if (x.PickingStatus.Contains(_searchString, StringComparison.OrdinalIgnoreCase))
               return true;

           return false;
       };



    private Func<CarAdviceMainTable, object> _sortBy => x =>
    {
        if (_sortNameByLength)
            return x.Id;
        else
            return x.AdviceDate;
    };


    protected override async Task OnInitializedAsync()
    {
        try
        {
            await ReadData(false);
            StateHasChanged();
        }
        catch(Exception ex)
        {
            Error.ProcessError(ex);
        }


    }


    private async Task ReadData(bool NoSent)
    {
        IEnumerable<Claim> claims = Enumerable.Empty<Claim>();
        var authState = await AuthState;
        var user = authState.User;
        if (!user.Identity.IsAuthenticated)
        {
            navigationManager.NavigateTo("/login");
        }
        else
        {
            UserName = user.FindFirst(d => d.Type == ClaimTypes.Name)?.Value;
            claims = user.Claims;
            string wszystkieRole = user.FindFirst(c => c.Type == ClaimTypes.Role)?.Value;
            if (wszystkieRole.Contains("SECURITY")) rolaSecurity = true;
            if (wszystkieRole.Contains("WH")) rolaWh = true;
        }

        // read data for datepicker from MSQl Table GlobalAppUsersParameters

        string linkUserParameters = "/api/GlobalAppUsersParameters/" + UserName;


        userParametersDates = await httpClient.GetFromJsonAsync<GlobalAppUsersParameters>(linkUserParameters);

        if (userParametersDates == null)
        {           
            ldStart = DateTime.Now.AddMonths(-3);
            ldEnd = DateTime.Now;
        }
        else
        {
            ldStart = userParametersDates.DateMainCAFrom;
            ldEnd = userParametersDates.DateMainCATo;
        }

        _dateRange = new DateRange(ldStart, ldEnd);

        string linkLoad = "";

        if (NoSent)
        {
            linkLoad = "/api/CarAdviceMainTables/GetbyDateNoSent/" + Helpers.ChangeDateToString(ldStart) + "/" + Helpers.ChangeDateToString(ldEnd);
        }
        else
        {
            linkLoad = "/api/CarAdviceMainTables/GetbyDate/" + Helpers.ChangeDateToString(ldStart) + "/" + Helpers.ChangeDateToString(ldEnd);
        }
        ListCAMainTable = await httpClient.GetFromJsonAsync<List<CarAdviceMainTable>>(linkLoad);
        string linkcoluser = "/api/CarAdviceMainPlanColums/MainPlanComumByUser/" + UserName;

        /// read colums for display main plan screen

        columsForDisplayListDb.Clear();

        columsForDisplayListDb = await httpClient.GetFromJsonAsync<List<CarAdviceMainPlanColumn>>(linkcoluser);

        foreach (var columienka in columsForDisplayListDb)
        {
            listGridColums.Add(new gridColums() { fieldName = columienka.MainScreenColumn,fieldTitle = columienka.MainScreenColumn, 
                filedfirterable = true, filedSortable = true, filedHiden = columienka.Hidden , plHeader = columienka.plHeader});    

        }


        #region setupColumsVisibility
        hiddenId = verificationColumsVisibility("Id");
        hiddenAdviceDate = verificationColumsVisibility("AdviceDate");
        hiddenFG_DelayReason = verificationColumsVisibility("FG_DelayReason");
        hiddenPickingStatus = verificationColumsVisibility("PickingStatus");
        hiddenClient = verificationColumsVisibility("Client");
        hiddenShipment = verificationColumsVisibility("Shipment");
        hiddenReference = verificationColumsVisibility("Reference");
        hiddenDestination = verificationColumsVisibility("Destination");
        hiddenDriverWh = verificationColumsVisibility("DriverWh");
        hiddenTruckPlatesWh = verificationColumsVisibility("TruckPlatesWh");
        hiddenForwarder = verificationColumsVisibility("Forwarder");
        hiddenForwarderInfo = verificationColumsVisibility("ForwarderInfo");
        hiddenEtd = verificationColumsVisibility("Etd");
        hiddenEntryByWh = verificationColumsVisibility("EntryByWh");
        hiddenRemarksWh = verificationColumsVisibility("RemarksWh");
        hiddenAta = verificationColumsVisibility("Ata");
        hiddenQuality = verificationColumsVisibility("Quality");
        hiddenTruckType = verificationColumsVisibility("TruckType");
        hiddenDriverS = verificationColumsVisibility("DriverS");
        hiddenTruckPlatesS = verificationColumsVisibility("TruckPlatesS");
        hiddenTpvEnterTime = verificationColumsVisibility("TpvEnterTime");
        hiddenTpvExitTime = verificationColumsVisibility("TpvExitTime");
        hiddenLoadingDock = verificationColumsVisibility("LoadingDock");
        hiddenCallBy = verificationColumsVisibility("CallBy");
        hiddenRemarksS = verificationColumsVisibility("RemarksS");
        hiddenEntryByS = verificationColumsVisibility("EntryByS");
        hiddenLeftTheDockTime = verificationColumsVisibility("LeftTheDockTime");
        hiddenPickingTime = verificationColumsVisibility("PickingTime");
        hiddenScannedTime = verificationColumsVisibility("ScannedTime");
        #endregion setupColumsVisibility


        StateHasChanged();

    }

    private bool verificationColumsVisibility(string comumnName)
    {
        if (columsForDisplayListDb.Count(c => c.MainScreenColumn == comumnName && c.Hidden == true) != 0)
        {
            return true;
        } 
        else
        {
            return false;
        }
    }


    public class clickInterval
    {
        public int clickCount { get; set; }
        public DateTime clickTime { get; set; }
    }

}