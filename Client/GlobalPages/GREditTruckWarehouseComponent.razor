@page "/editGrTuckWh/{zId}"
@using SCMDWH.Client.Tools;
@using SCMDWH.Shared.Models;
@using System.Security.Claims;
@inject HttpClient httpClient
@inject IStringLocalizer<CultureExample2> Loc
@inject NavigationManager navigationManager
@inject IDialogService DialogService
@inject ISnackbar Snackbar

<style>

    .demo-content {
        padding: 1px;
        font-size: 10px;
        background: #dbdfe5;
        margin-bottom: 1px;
        font-weight: 500;
    }

        .demo-content.bg-alt {
            background: #dbdfe5;
            font-size: 15px;
        }

    .mud-grid-spacing-xs-3 > .mud-grid-item {
        padding: 1px;
    }
</style>

<hr />
<MudGrid Style="background-color:#faf6f5!important">
    <MudItem xs="12">
        <MudAlert Severity="Severity.Normal" Style="background-color:#fadcd4!important" Dense="true" ContentAlignment="HorizontalAlignment.Center" Elevation="2">@Loc["lbGeneralInfo"]</MudAlert>
    </MudItem>
    <MudItem xs="6" sm="2">
    </MudItem>
    <MudItem xs="6" sm="1">
        <MudTextField Label="Nr" @bind-Value="@CAMainTable.Id" Variant="Variant.Text" ReadOnly="true" Margin="Margin.Normal"></MudTextField>
    </MudItem>
    <MudItem xs="6" sm="1">
    </MudItem>
    <MudItem xs="6" sm="2">
        <MudDatePicker Label=@Loc["lbAdDate"] @bind-Date="@CAMainTable.AddDate" DisableToolbar="true" ReadOnly="false" Editable="true" Margin="Margin.Normal" />
    </MudItem>
   
    <MudItem xs="6" sm="2">
        <h6 style="margin-top:10px!important">@CAMainTable.Invoices </h6>
    </MudItem>
    <MudItem xs="3" sm="1">
        <h6 style="margin-top:10px!important"> @CAMainTable.Sender</h6>
    </MudItem>
    <MudItem xs="12" sm="6">
        <MudAlert Severity="Severity.Normal" Style="background-color:#ebf5f7!important" Dense="true" ContentAlignment="HorizontalAlignment.Center" Elevation="1">@Loc["lbGeneralWarehouseInfoprmation"]</MudAlert>
    </MudItem>
    <MudItem xs="12" sm="6">
        <MudAlert Severity="Severity.Normal" Style="background-color:#fadcd4!important" Dense="true" ContentAlignment="HorizontalAlignment.Center" Elevation="2">@Loc["lbSecurityEntryInfo"]</MudAlert>
    </MudItem>

    <MudItem xs="6" sm="3">
        <MudDatePicker Label=@Loc["lbEtdDate"] @bind-Date="@EtdTimeDate" DisableToolbar="true" Disabled="@readOnlyWH" Margin="Margin.Normal" />
    </MudItem>
    <MudItem xs="6" sm="3">
        <MudStack Row="true" Justify="Justify.FlexStart" AlignItems="AlignItems.Center">
            <MudTimePicker Label=@Loc["lbEtdTime"] AmPm="false" @bind-Time="EtdTimeTime" Editable = "true" DisableToolbar="true" Disabled="@readOnlyWH" ErrorText=@Loc["lberrorDateTime"] Margin="Margin.Normal" />
            <MudButton Variant="Variant.Filled" Size="Size.Small" Disabled="@readOnlyWH" OnClick="NowButton4">@Loc["lbNow"]  </MudButton>
        </MudStack>
    </MudItem>
    <MudItem xs="6" sm="3">
        <MudDatePicker Label=@Loc["lbAtaTimeDate"] @bind-Date="AtaTimeDate" Disabled="@readOnlyScurity" Margin="Margin.Normal" />
    </MudItem>
    <MudItem xs="6" sm="3">
        <MudStack Row="true" Justify="Justify.FlexStart" AlignItems="AlignItems.Center">
            <MudTimePicker Label=@Loc["lbAtaDateTime"] AmPm="false" @bind-Time="AtaTimeTime" Editable="true" Disabled="@readOnlyScurity" ErrorText=@Loc["lberrorDateTime"] Margin="Margin.Normal" />
            <MudButton Variant="Variant.Filled" Size="Size.Small" Disabled="@readOnlyScurity" OnClick="NowButton1">@Loc["lbNow"] </MudButton>
        </MudStack>
    </MudItem>

     <MudItem xs="2" sm="2">
       
        
        <MudAutocomplete Margin="Margin.Normal" Dense="true" T="string" Label=@Loc["lbContainerQ"] @bind-Value="CAMainTable.ContainerStatus" SearchFunc="@SearchConterQ"
                         Disabled="@readOnlyWH" ResetValueOnEmptyText="@resetValueOnEmptyText" />

    </MudItem>
    <MudItem xs="2" sm="2">


        <MudAutocomplete Margin="Margin.Normal" Dense="true" T="string" Label=@Loc["lbMaterialQ"] @bind-Value="CAMainTable.MaterialStatus" SearchFunc="@SearchMaterialQ"
        Disabled="@readOnlyWH" ResetValueOnEmptyText="@resetValueOnEmptyText" />

    </MudItem>

    <MudItem xs="2" sm="2">
        <MudAutocomplete Margin="Margin.Normal" Dense="true" T="string" Label=@Loc["lbPickingstatus"] @bind-Value="CAMainTable.PickingStatus" SearchFunc="@SearchStatus"
                         Disabled="@readOnlyWH" ResetValueOnEmptyText="@resetValueOnEmptyText" />

    </MudItem>
   
    <MudItem xs="6" sm="3">
      @*  <MudTextField Label=@Loc["lbTruckType"] @bind-Value="@CAMainTable.TruckType" Variant="Variant.Text"  Disabled = "@readOnlyScurity"  Margin="Margin.Normal"></MudTextField>*@
        <MudAutocomplete Margin="Margin.Normal" Dense="true" T="string" Label=@Loc["lbTruckType"] @bind-Value="CAMainTable.TruckType" SearchFunc="@SearchTuruckType"
                         ResetValueOnEmptyText="@resetValueOnEmptyText" Disabled="@readOnlyScurity" />
    </MudItem>
    <MudItem xs="6" sm="3">
        <MudAutocomplete Margin="Margin.Normal" Dense="true" T="string" Label=@Loc["lbQuality"] @bind-Value="CAMainTable.Quality" SearchFunc="@SearchQuality"
                         Disabled="@readOnlyScurity" ResetValueOnEmptyText="@resetValueOnEmptyText" />
    </MudItem>
    <MudItem xs="6" sm="6">
        <MudStack Row="true" Justify="Justify.FlexStart" AlignItems="AlignItems.Center">
            <MudTextField Label=@Loc["lbDriverWH"] @bind-Value="@CAMainTable.DriverWh" Variant="Variant.Text" Disabled="@readOnlyWH" Margin="Margin.Normal" Validation="@(new Func<string, string>(DriverMatch))"></MudTextField>
            <MudButton Variant="Variant.Filled" Size="Size.Small" Disabled="@readOnlyWH" OnClick="CopyButtonWhDriver">@Loc["lbCopy"] </MudButton>
        </MudStack>
    </MudItem>
    <MudItem xs="6" sm="6">
        <MudStack Row="true" Justify="Justify.FlexStart" AlignItems="AlignItems.Center">
            <MudTextField Label=@Loc["lbDriverS"] @bind-Value="@CAMainTable.DriverS" Variant="Variant.Text" Disabled="@readOnlyScurity" Margin="Margin.Normal" Validation="@(new Func<string, string>(DriverMatch))"></MudTextField>
            <MudButton Variant="Variant.Filled" Size="Size.Small" Disabled="@readOnlyScurity" OnClick="CopyButtonSecDriver">@Loc["lbCopy"] </MudButton>
        </MudStack>
    </MudItem>
    <MudItem xs="6" sm="6">
        <MudStack Row="true" Justify="Justify.FlexStart" AlignItems="AlignItems.Center">
            <MudTextField Label=@Loc["lbPlates"] @bind-Value="@CAMainTable.TruckPlatesWh" Variant="Variant.Text" Disabled="@readOnlyWH" Margin="Margin.Normal" Validation="@(new Func<string, string>(PlatesMatch))"></MudTextField>
            <MudButton Variant="Variant.Filled" Size="Size.Small" Disabled="@readOnlyWH" OnClick="CopyButton1">@Loc["lbCopy"] </MudButton>
        </MudStack>
    </MudItem>
    <MudItem xs="6" sm="6">
        <MudStack Row="true" Justify="Justify.FlexStart" AlignItems="AlignItems.Center">
            <MudTextField Label=@Loc["lbPlates"] @bind-Value="@CAMainTable.TruckPlatesS" Variant="Variant.Text" Disabled="@readOnlyScurity" Margin="Margin.Normal" Validation="@(new Func<string, string>(PlatesMatch))"></MudTextField>
            <MudButton Variant="Variant.Filled" Size="Size.Small" Disabled="@readOnlyScurity" OnClick="CopyButton2">@Loc["lbCopy"] </MudButton>
        </MudStack>
    </MudItem>
    <MudItem xs="6" sm="6">
        <MudTextField Label=@Loc["lbDock"] @bind-Value="@CAMainTable.LoadingDock" Variant="Variant.Text" Disabled="@readOnlyWH" Margin="Margin.Normal"></MudTextField>
    </MudItem>
    <MudItem xs="6" sm="6">
        <MudTextField Label=@Loc["lbCallBy"] @bind-Value="@CAMainTable.CallBy" Variant="Variant.Text" Disabled="@readOnlyScurity" Margin="Margin.Normal"></MudTextField>

    </MudItem>

    <MudItem xs="3" sm="3">        
        <MudTimePicker Label="Czas rozpoczecia" Editable="true" @bind-Time="@zmStartUnloadingTime" />
    </MudItem>
    <MudItem xs="3" sm="3">
        <MudTimePicker Label="Czas zakonczenia" Editable="true" @bind-Time="@zmFinishUnloadingTime" />
    </MudItem>
    <MudItem xs="6" sm="3">
        <MudDatePicker Label=@Loc["lbTPVEntrydate"] @bind-Date="TPVEntryTimeDate" DisableToolbar="true" Disabled="@readOnlyScurity" Margin="Margin.Normal" />
    </MudItem>
    <MudItem xs="6" sm="3">
        <MudStack Row="true" Justify="Justify.FlexStart" AlignItems="AlignItems.Center">
            <MudTimePicker Label=@Loc["lbTPVEntrytime"] AmPm="false" @bind-Time="TPVEntryTimeTime" Editable = "true" DisableToolbar="true" Disabled="@readOnlyScurity" ErrorText=@Loc["lberrorDateTime"] Margin="Margin.Normal" />
            <MudButton Variant="Variant.Filled" Size="Size.Small" OnClick="NowButton2">@Loc["lbNow"] </MudButton>
        </MudStack>
    </MudItem>
     <MudItem xs="6" sm="6">
    </MudItem>
    <MudItem xs="6" sm="3">
        <MudDatePicker Label=@Loc["lbTPVExitdate"] @bind-Date="TPVExitTimeDate" DisableToolbar="true" Disabled="@readOnlyScurity" Margin="Margin.Normal" />
    </MudItem>
    <MudItem xs="6" sm="3">
        <MudStack Row="true" Justify="Justify.FlexStart" AlignItems="AlignItems.Center">
            <MudTimePicker Label=@Loc["lbTpvExitTime"] AmPm="false" @bind-Time="TPVExitTimeTime" Editable = "true" DisableToolbar="true" Disabled="@readOnlyScurity" ErrorText=@Loc["lberrorDateTime"] Margin="Margin.Normal" />
            <MudButton Variant="Variant.Filled" Size="Size.Small" OnClick="NowButton3">@Loc["lbNow"] </MudButton>
        </MudStack>
    </MudItem>
    <MudItem xs="6" sm="6">
        <MudTextField Label=@Loc["lbRemarkWH"] @bind-Value="@CAMainTable.RemarksWh" Variant="Variant.Text" Disabled="@readOnlyWH" Margin="Margin.Normal"></MudTextField>
    </MudItem>
    <MudItem xs="6" sm="6">
        <MudTextField Label=@Loc["lbRemarksS"] @bind-Value="@CAMainTable.RemarkS" Variant="Variant.Text" Disabled="@readOnlyScurity" Margin="Margin.Normal"></MudTextField>
    </MudItem>
    <MudItem xs="6" sm="6">
        <MudTextField Label=@Loc["lbEntrybyWH"] @bind-Value="@CAMainTable.EntryByWh" Variant="Variant.Text" Disabled="@readOnlyWH" Margin="Margin.Normal"></MudTextField>
    </MudItem>
    <MudItem xs="6" sm="6">
        <MudTextField Label=@Loc["lbEntryByS"] @bind-Value="@CAMainTable.EntryByS" Variant="Variant.Text" Disabled="@readOnlyScurity" Margin="Margin.Normal"></MudTextField>
    </MudItem>
</MudGrid>

<MudSimpleTable Style="overflow-x: auto;" Dense="true" Hover="true" Bordered="true" Striped="true">
    <thead>
        <tr>
            <th>Invoice</th>
            <th>Container</th>
            <th>Material</th>
            <th>Pallet No</th>
            <th>Pallet Qty</th>
            <th>Qty</th>
        </tr>
    </thead>
    <tbody>
        @foreach (var row in CAMainTable.CarAdviceGrTruckItems)
        {
            <tr>
                <td>@row.InvoiceNo</td>
                <td>@row.ContainerNo</td>
                <td>@row.Material</td>
                <td>@row.PalletNo</td>
                <td>@row.TotalPalletQty</td>
                <td>@row.TotalQty</td>
            </tr>
        }
    </tbody>
</MudSimpleTable>

<hr />
<MudGrid>
    <MudItem xs="6">

    @*    <MudButton Variant="Variant.Filled" StartIcon="@Icons.Material.Filled.Print" Size="Size.Small" OnClick="PrintWH">@Loc["lbPrintWH"]</MudButton>*@
    </MudItem>
    <MudItem xs="2">

        <MudButton  Color="Color.Error" Variant="Variant.Filled" StartIcon="@Icons.Material.Filled.Delete" Size="Size.Small" OnClick="DeleteButton">@Loc["lbDelete"]</MudButton>
    </MudItem>
    <MudItem xs="2">
        <MudButton Variant="Variant.Filled" StartIcon="@Icons.Material.Filled.Cancel" Size="Size.Small" OnClick="CancelButton">@Loc["lbCancel"]</MudButton>
    </MudItem>

    <MudItem xs="2">
        <MudButton  Variant="Variant.Filled" StartIcon="@Icons.Material.Filled.Save" Size="Size.Small" OnClick="SaveWh">@Loc["lbSave"]</MudButton>
    </MudItem>
</MudGrid>


@code {
    [Parameter] public string zId { get; set; }

    [CascadingParameter]
    public Task<AuthenticationState> AuthState { get; set; }

    private bool rolaAdministrator;
    private bool rolaDictionary = true;
    private bool rolaScmTools;
    private bool rolaGrOperator;
    private bool rolaGrAdmin;
    private bool rolaFGOperator;
    private bool rolaFGAdmin;
    private bool rolaSecurity;
    string UserName = "";

    private bool readOnlyScurity = true;
    private bool readOnlyWH = true;

    private IEnumerable<Claim> claims = Enumerable.Empty<Claim>();


    CarAdviceGrTruckMainTable CAMainTable = new CarAdviceGrTruckMainTable();

    DateTime? EtdTimeDate;
    TimeSpan? EtdTimeTime;
    DateTime? AtaTimeDate;
    TimeSpan? AtaTimeTime;

    DateTime? TPVEntryTimeDate;
    TimeSpan? TPVEntryTimeTime;

    DateTime? TPVExitTimeDate;
    TimeSpan? TPVExitTimeTime;

    TimeSpan? zmStartUnloadingTime;
    TimeSpan? zmFinishUnloadingTime;

    private bool resetValueOnEmptyText;
    List<CarAdviceGrDictionaryCarStatuses> StatusList = new List<CarAdviceGrDictionaryCarStatuses>();
    private List<string> lStatus;

    List<CarAdviceDictionaryReason> FG_DelayReasonList = new List<CarAdviceDictionaryReason>();
    private List<string> FG_DelayReason;


    List<CarAdviceGrDictionaryContainerQ> CarAdviceGrDictionaryContainerQList = new List<CarAdviceGrDictionaryContainerQ>();
    private List<string> carAdviceGrDictionaryContainerQ;

    List<CarAdviceGrDictionaryMaterialQ> CarAdviceGrDictionaryMaterialQList = new List<CarAdviceGrDictionaryMaterialQ>();
    private List<string> carAdviceGrDictionaryMaterialQ;


    List<CarAdviceDictionaryQuality> qualityList = new List<CarAdviceDictionaryQuality>();
    private List<string> quality;

    List<CarAdviceDictionaryTruckType> truckTypeList = new List<CarAdviceDictionaryTruckType>();
    private List<string> trucktype;


    private void NowButton3()
    {
        TPVExitTimeDate = DateTime.Today;
        TPVExitTimeTime = DateTime.Now.TimeOfDay;
        StateHasChanged();
    }

    private void NowButton1()
    {

        AtaTimeDate = DateTime.Today;
        AtaTimeTime = DateTime.Now.TimeOfDay;
        StateHasChanged();
    }

    private void NowButton2()
    {
        TPVEntryTimeDate = DateTime.Today;
        TPVEntryTimeTime = DateTime.Now.TimeOfDay;
        StateHasChanged();
    }

    private async Task<IEnumerable<string>> SearchTuruckType(string value)
    {
        if (string.IsNullOrEmpty(value))
            return trucktype;
        return trucktype.Where(x => x.Contains(value, StringComparison.InvariantCultureIgnoreCase));
    }

    private void NowButton4()
    {
        EtdTimeDate = DateTime.Today;
        EtdTimeTime = DateTime.Now.TimeOfDay;
        StateHasChanged();
    }

    private void CopyButtonWhDriver()
    {
        CAMainTable.DriverWh = CAMainTable.DriverS;
        StateHasChanged();
    }
    private void CopyButtonSecDriver()
    {
        CAMainTable.DriverS = CAMainTable.DriverWh;
        StateHasChanged();
    }

    private void CopyButton1()
    {
        CAMainTable.TruckPlatesWh = CAMainTable.TruckPlatesS;
        StateHasChanged();
    }

    private void CopyButton2()
    {
        CAMainTable.TruckPlatesS = CAMainTable.TruckPlatesWh;
        StateHasChanged();
    }

    private async Task CancelButton()
    {
        navigationManager.NavigateTo("/grcarAdvice", true);
    }

    private async Task DeleteButton()
    {
        var parameters = new DialogParameters();
        string MessageDialog = Loc["lbDoYouRealyDelete"];
        parameters.Add("ContentText", MessageDialog);
        parameters.Add("ButtonText", "Delete");
        parameters.Add("Color", Color.Error);
        var options = new DialogOptions() { CloseButton = false, MaxWidth = MaxWidth.ExtraSmall };
        string textDelete = Loc["lbDelete"];
        var dialog = DialogService.Show<DialogUserDeleteComponent>(textDelete, parameters, options);
        var result = await dialog.Result;
       
        if (!result.Canceled)
        {
            try
            {
                string link = "/api/CarAdviceGrTruckMainTable/" + zId;
                var Res = await httpClient.DeleteAsync(link);
               
            }
            catch (Exception e)
            {
                Snackbar.Add(e.Message, Severity.Error, config => { config.ShowCloseIcon = false; config.Icon = Icons.Material.Rounded.Error; config.VisibleStateDuration = 1500; });
            }
        }
        navigationManager.NavigateTo("/grcarAdvice", true);
    }

    private async Task SaveWh()
    {
        CAMainTable.EntryByS = UserName;


        if (zmFinishUnloadingTime != null)
        {
            DateTime FUTimeDateNotNulable =  DateTime.Today;
            TimeSpan FUTimeTimeNotNulable = (TimeSpan)zmFinishUnloadingTime;
            CAMainTable.FinishUnloading = FUTimeDateNotNulable.Add(FUTimeTimeNotNulable);
        }


        if (zmStartUnloadingTime != null)
        {
            DateTime SUTimeDateNotNulable = DateTime.Today;
            TimeSpan SUTimeTimeNotNulable = (TimeSpan)zmStartUnloadingTime;
            CAMainTable.StartUnloading = SUTimeDateNotNulable.Add(SUTimeTimeNotNulable);
        }


        if (EtdTimeDate != null)
        {
            DateTime EtdTimeDateNotNulable = (DateTime)EtdTimeDate;
            TimeSpan EtdTimeTimeNotNulable = (TimeSpan)EtdTimeTime;
            CAMainTable.ETD = EtdTimeDateNotNulable.Add(EtdTimeTimeNotNulable);

        }

        if (AtaTimeDate != null)
        {
            DateTime AtaTimeDateNotNulable = (DateTime)AtaTimeDate;
            TimeSpan AtaTimeTimeNotNulable = (TimeSpan)AtaTimeTime;
            CAMainTable.Ata = AtaTimeDateNotNulable.Add(AtaTimeTimeNotNulable);
        }

        if (TPVEntryTimeDate != null)
        {
            DateTime TPVEntryTimeDateNotNulable = (DateTime)TPVEntryTimeDate;
            TimeSpan TPVEntryTimeTimeNotNulable = (TimeSpan)TPVEntryTimeTime;
            CAMainTable.TpvEnterTime = TPVEntryTimeDateNotNulable.Add(TPVEntryTimeTimeNotNulable);
        }

        if (TPVExitTimeDate != null)
        {
            DateTime TPVExitTimeDateNotNulable = (DateTime)TPVExitTimeDate;
            TimeSpan TPVExitTimeTimeNotNulable = (TimeSpan)TPVExitTimeTime;
            CAMainTable.TpvExitTime = TPVExitTimeDateNotNulable.Add(TPVExitTimeTimeNotNulable);
        }

        string linkSave = "/api/CarAdviceGrTruckMainTable/" + CAMainTable.Id;
        var Response = await httpClient.PutAsJsonAsync<CarAdviceGrTruckMainTable>(linkSave, CAMainTable);

        navigationManager.NavigateTo("/grcarAdvice", true);



    }

    private async Task PrintWH()
    {


    }

    private string DriverMatch(string arg)
    {
        if (CAMainTable.DriverWh != arg)
            return @Loc["lbDriverMatchError"];
        return null;
    }

    private string PlatesMatch(string arg)
    {
        if (CAMainTable.TruckPlatesWh != arg)
            return @Loc["lbPlatesMatchError"];
        return null;
    }

      private async Task<IEnumerable<string>> SearchConterQ(string value)
    {
        if (string.IsNullOrEmpty(value))
           
        return carAdviceGrDictionaryContainerQ;
        return carAdviceGrDictionaryContainerQ.Where(x => x.Contains(value, StringComparison.InvariantCultureIgnoreCase));
        
    }

    private async Task<IEnumerable<string>> SearchMaterialQ(string value)
    {
        if (string.IsNullOrEmpty(value))
            return carAdviceGrDictionaryMaterialQ;
        return carAdviceGrDictionaryMaterialQ.Where(x => x.Contains(value, StringComparison.InvariantCultureIgnoreCase));
    }

    private async Task<IEnumerable<string>> SearchFGDelayReason(string value)
    {
        if (string.IsNullOrEmpty(value))
            return FG_DelayReason;
        return FG_DelayReason.Where(x => x.Contains(value, StringComparison.InvariantCultureIgnoreCase));
    }

    private async Task<IEnumerable<string>> SearchQuality(string value)
    {
        if (string.IsNullOrEmpty(value))
            return quality;
        return quality.Where(x => x.Contains(value, StringComparison.InvariantCultureIgnoreCase));
    }

    protected override async Task OnInitializedAsync()
    {
        var authState = await AuthState;
        var user = authState.User;
        if (!user.Identity.IsAuthenticated)
        {
            navigationManager.NavigateTo("/login");
        }
        else
        {
            UserName = user.FindFirst(d => d.Type == ClaimTypes.Name)?.Value;
            claims = user.Claims;
            string rolesForDisplay = user.FindFirst(c => c.Type == ClaimTypes.Role)?.Value;
            rolaAdministrator = rolesForDisplay.Contains("Administrator");
            rolaScmTools = rolesForDisplay.Contains("SCMTOOLS");
            rolaSecurity = rolesForDisplay.Contains("SECURITY");

            // Nowe role do wsprowadzenia GR

            rolaGrOperator = rolesForDisplay.Contains("GROp");
            rolaGrAdmin = rolesForDisplay.Contains("GRAdmin");
            rolaFGAdmin = rolesForDisplay.Contains("FGAdmin");
            rolaFGOperator = rolesForDisplay.Contains("FGOp");

            if (rolaGrOperator ^ rolaGrAdmin) readOnlyWH = false;
            if (rolaSecurity) readOnlyScurity = false;
        }

        // truck type

        string linktt = "/api/CarAdviceDictionaryTruckTypes/GetCarAdviceDictionaryActiveTruckType";
        truckTypeList = await httpClient.GetFromJsonAsync<List<CarAdviceDictionaryTruckType>>(linktt);
        trucktype = truckTypeList.Select(c => c.Truck).ToList();

        // quality

        string linkq = "/api/CarAdviceDictionaryQualities";
        qualityList = await httpClient.GetFromJsonAsync<List<CarAdviceDictionaryQuality>>(linkq);
        quality = qualityList.Select(c => c.Quality).ToList();



        // MaterialQ

        string mlinkq = "/api/CarAdviceGrDictionaryMaterialQ";
        CarAdviceGrDictionaryMaterialQList = await httpClient.GetFromJsonAsync<List<CarAdviceGrDictionaryMaterialQ>>(mlinkq);
        carAdviceGrDictionaryMaterialQ = CarAdviceGrDictionaryMaterialQList.Select(c => c.Status).ToList();


        // ContainerQ

        string clinkq = "/api/CarAdviceGrDictionaryContainerQ";
        CarAdviceGrDictionaryContainerQList = await httpClient.GetFromJsonAsync<List<CarAdviceGrDictionaryContainerQ>>(clinkq);
        carAdviceGrDictionaryContainerQ = CarAdviceGrDictionaryContainerQList.Select(c => c.Status).ToList();




        // FG_reason for delay

        //string linkRu = "/api/CarAdviceDictionaryReasons/GetCarAdviceDictionaryActiveReason";
        //FG_DelayReasonList = await httpClient.GetFromJsonAsync<List<CarAdviceDictionaryReason>>(linkRu);
        //FG_DelayReason = FG_DelayReasonList.Select(c => c.Code).ToList();


        string linkUrl = "/api/CarAdviceGrTruckMainTable/" + zId;
        CAMainTable =  await httpClient.GetFromJsonAsync<CarAdviceGrTruckMainTable>(linkUrl);

        if (CAMainTable.StartUnloading == null)
        {
            zmStartUnloadingTime = null;
        }
        else
        {
            zmStartUnloadingTime = Convert.ToDateTime(CAMainTable.StartUnloading).TimeOfDay;
        }

        if (CAMainTable.FinishUnloading == null)
        {
            zmFinishUnloadingTime = null;
        }
        else
        {
            zmFinishUnloadingTime = Convert.ToDateTime(CAMainTable.FinishUnloading).TimeOfDay;
        }

        if (CAMainTable.ETD == null)
        {
            EtdTimeDate = null;
            EtdTimeTime = null;
        }
        else
        {
            EtdTimeDate = Convert.ToDateTime(CAMainTable.ETD).Date;
            EtdTimeTime = Convert.ToDateTime(CAMainTable.ETD).TimeOfDay;
        }

        if (CAMainTable.Ata == null)
        {
            AtaTimeDate = null;
            AtaTimeTime = null;
        }
        else
        {
            AtaTimeDate = Convert.ToDateTime(CAMainTable.Ata).Date;
            AtaTimeTime = Convert.ToDateTime(CAMainTable.Ata).TimeOfDay;
        }


        // TPV Entry Time

        if (CAMainTable.TpvEnterTime == null)
        {
            TPVEntryTimeDate = null;
            TPVEntryTimeTime = null;
        }
        else
        {
            TPVEntryTimeDate = Convert.ToDateTime(CAMainTable.TpvEnterTime).Date;
            TPVEntryTimeTime = Convert.ToDateTime(CAMainTable.TpvEnterTime).TimeOfDay;
        }

        // TPV exit time

        if (CAMainTable.TpvExitTime == null)
        {
            TPVExitTimeDate = null;
            TPVExitTimeTime = null;
        }
        else
        {
            TPVExitTimeDate = Convert.ToDateTime(CAMainTable.TpvExitTime).Date;
            TPVExitTimeTime = Convert.ToDateTime(CAMainTable.TpvExitTime).TimeOfDay;
        }

        // picking status

        string linkstat = "/api/CarAdviceGrDictionaryCarStatuses";
        StatusList = await httpClient.GetFromJsonAsync<List<CarAdviceGrDictionaryCarStatuses>>(linkstat);
        lStatus = StatusList.Select(c => c.Status).ToList();

        StateHasChanged();
    }

    private async Task<IEnumerable<string>> SearchStatus(string value)
    {
        if (string.IsNullOrEmpty(value))
            return lStatus;
        return lStatus.Where(x => x.Contains(value, StringComparison.InvariantCultureIgnoreCase));
    }

}
