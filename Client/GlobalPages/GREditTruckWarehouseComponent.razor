@page "/editGrTuckWh/{zId}"
@using SCMDWH.Client.Tools;
@using SCMDWH.Shared.Models;
@inject HttpClient httpClient
@inject IStringLocalizer<CultureExample2> Loc


<style>

    .demo-content {
        padding: 1px;
        font-size: 10px;
        background: #dbdfe5;
        margin-bottom: 1px;
        font-weight: 500;
    }

        .demo-content.bg-alt {
            background: #dbdfe5;
            font-size: 15px;
        }

    .mud-grid-spacing-xs-3 > .mud-grid-item {
        padding: 1px;
    }
</style>

<hr />
<MudGrid Style="background-color:#faf6f5!important">
    <MudItem xs="12">
        <MudAlert Severity="Severity.Normal" Style="background-color:#fadcd4!important" Dense="true" ContentAlignment="HorizontalAlignment.Center" Elevation="2">@Loc["lbGeneralInfo"]</MudAlert>
    </MudItem>
    <MudItem xs="6" sm="1">
        <MudTextField Label="Nr" @bind-Value="@CAMainTable.Id" Variant="Variant.Text" ReadOnly="true" Margin="Margin.Normal"></MudTextField>
    </MudItem>
    <MudItem xs="6" sm="2">
        <MudDatePicker Label=@Loc["lbAdDate"] @bind-Date="@CAMainTable.AddDate" DisableToolbar="true" ReadOnly="false" Editable="true" Margin="Margin.Normal" />
    </MudItem>
    <MudItem xs="6" sm="2">
        <MudTextField Label=@Loc["lbShipment"] @bind-Value="@CAMainTable.SenderName" Variant="Variant.Text" ReadOnly="false" Margin="Margin.Normal"></MudTextField>
    </MudItem>
    <MudItem xs="6" sm="2">
        <MudTextField Label=@Loc["lbReference"] @bind-Value="@CAMainTable.Reference" Variant="Variant.Text" ReadOnly="false" Margin="Margin.Normal"></MudTextField>
    </MudItem>
    <MudItem xs="6" sm="2">

        <MudTextField Label=@Loc["lbReference"] @bind-Value="@CAMainTable.CarRemark" Variant="Variant.Text" ReadOnly="false" Margin="Margin.Normal"></MudTextField>

    </MudItem>
    <MudItem xs="6" sm="2">
    

    </MudItem>
    <MudItem xs="6" sm="1">
      

    </MudItem>
    <MudItem xs="12" sm="6">
        <MudAlert Severity="Severity.Normal" Style="background-color:#ebf5f7!important" Dense="true" ContentAlignment="HorizontalAlignment.Center" Elevation="1">@Loc["lbGeneralWarehouseInfoprmation"]</MudAlert>
    </MudItem>
    <MudItem xs="12" sm="6">
        <MudAlert Severity="Severity.Normal" Style="background-color:#fadcd4!important" Dense="true" ContentAlignment="HorizontalAlignment.Center" Elevation="2">@Loc["lbSecurityEntryInfo"]</MudAlert>
    </MudItem>

    <MudItem xs="6" sm="3">
        <MudDatePicker Label=@Loc["lbEtdDate"] @bind-Date="@EtdTimeDate" DisableToolbar="true" ReadOnly="false" Editable="true" Margin="Margin.Normal" />
    </MudItem>
    <MudItem xs="6" sm="3">
        <MudStack Row="true" Justify="Justify.FlexStart" AlignItems="AlignItems.Center">
            <MudTimePicker Label=@Loc["lbEtdTime"] AmPm="false" @bind-Time="EtdTimeTime" DisableToolbar="true" ReadOnly="false" Editable="true" ErrorText=@Loc["lberrorDateTime"] Margin="Margin.Normal" />
          
        </MudStack>
    </MudItem>
    <MudItem xs="6" sm="3">
        <MudDatePicker Label=@Loc["lbAtaTimeDate"] @bind-Date="AtaTimeDate" DisableToolbar="true" ReadOnly="false" Editable="false" Margin="Margin.Normal" />
    </MudItem>
    <MudItem xs="6" sm="3">
        <MudStack Row="true" Justify="Justify.FlexStart" AlignItems="AlignItems.Center">
            <MudTimePicker Label=@Loc["lbAtaDateTime"] AmPm="false" @bind-Time="AtaTimeTime" DisableToolbar="false" ReadOnly="true" Editable="false" ErrorText=@Loc["lberrorDateTime"] Margin="Margin.Normal" />
           
        </MudStack>
    </MudItem>
    <MudItem xs="3" sm="3">
        <MudAutocomplete Margin="Margin.Normal" Dense="true" T="string" Label=@Loc["lbPickingstatus"] @bind-Value="CAMainTable.Status" SearchFunc="@SearchStatus"
                         ResetValueOnEmptyText="@resetValueOnEmptyText" />

    </MudItem>

   
</MudGrid>

<MudSimpleTable Style="overflow-x: auto;" Dense="true" Hover="true" Bordered="true" Striped="true">
    <thead>
        <tr>
            <th>Invoice</th>
            <th>Container</th>
            <th>Material</th>
            <th>Pallet No</th>
            <th>Pallet Qty</th>
            <th>Qty</th>
        </tr>
    </thead>
    <tbody>
        @foreach (var row in CAMainTable.CarAdviceGrTruckItems)
        {
            <tr>
                <td>@row.InvoiceNo</td>
                <td>@row.ContainerNo</td>
                <td>@row.Material</td>
                <td>@row.PalletNo</td>
                <td>@row.TotalPalletQty</td>
                <td>@row.TotalQty</td>
            </tr>
        }
    </tbody>
</MudSimpleTable>


@code {
    [Parameter] public string zId { get; set; }

    CarAdviceGrTruckMainTable CAMainTable = new CarAdviceGrTruckMainTable();

    DateTime? EtdTimeDate;
    TimeSpan? EtdTimeTime;
    DateTime? AtaTimeDate;
    TimeSpan? AtaTimeTime;

    private bool resetValueOnEmptyText;
    List<CarAdviceGrDictionaryCarStatuses> StatusList = new List<CarAdviceGrDictionaryCarStatuses>();
    private List<string> lStatus;

   protected override async Task OnInitializedAsync()
    {
        string linkUrl = "/api/CarAdviceGrTruckMainTable/" + zId;
        CAMainTable =  await httpClient.GetFromJsonAsync<CarAdviceGrTruckMainTable>(linkUrl);


        if (CAMainTable.ETD == null)
        {
            EtdTimeDate = null;
            EtdTimeTime = null;
        }
        else
        {
            EtdTimeDate = Convert.ToDateTime(CAMainTable.ETD).Date;
            EtdTimeTime = Convert.ToDateTime(CAMainTable.ETD).TimeOfDay;
        }

        if (CAMainTable.Ata == null)
        {
            AtaTimeDate = null;
            AtaTimeTime = null;
        }
        else
        {
            AtaTimeDate = Convert.ToDateTime(CAMainTable.Ata).Date;
            AtaTimeTime = Convert.ToDateTime(CAMainTable.Ata).TimeOfDay;
        }

        // picking status

        string linkstat = "/api/CarAdviceGrDictionaryCarStatuses";
        StatusList = await httpClient.GetFromJsonAsync<List<CarAdviceGrDictionaryCarStatuses>>(linkstat);
        lStatus = StatusList.Select(c => c.Status).ToList();

        StateHasChanged();
    }

    private async Task<IEnumerable<string>> SearchStatus(string value)
    {
        if (string.IsNullOrEmpty(value))
            return lStatus;
        return lStatus.Where(x => x.Contains(value, StringComparison.InvariantCultureIgnoreCase));
    }

}
