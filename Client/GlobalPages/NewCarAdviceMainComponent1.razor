@page "/caradvice1"
@using System.Net.Http.Json
@using System.Text.Json.Serialization;
@using SCMDWH.Shared.Models;

@inject HttpClient httpClient


<MudDataGrid T="CarAdviceMainTable" MultiSelection="true" Items="@ListCAMainTable" SortMode="SortMode.Multiple" Filterable="true" QuickFilter="@_quickFilter"
             Hideable="true" RowClick="@RowClicked" SelectedItemsChanged="@SelectedItemsChanged">
    <ToolBarContent>
        <MudText Typo="Typo.h6">Periodic Elements</MudText>
        <MudSpacer />
        <MudTextField @bind-Value="_searchString" Placeholder="Search" Adornment="Adornment.Start" Immediate="true"
                      AdornmentIcon="@Icons.Material.Filled.Search" IconSize="Size.Medium" Class="mt-0"></MudTextField>
    </ToolBarContent>
    <Columns>
      
        <PropertyColumn Property="x => x.Id" Title="Nr" Sortable="false" Filterable="false" />
        <PropertyColumn Property="x => x.AdviceDate" />
        <PropertyColumn Property="x => x.Ata" SortBy="@_sortBy" />
        <PropertyColumn Property="x => x.CallBy" />
        <PropertyColumn Property="x => x.Destination" Title="Molar mass" />
        <PropertyColumn Property="x => x.DriverS" Title="Category" />
    </Columns>
    <PagerContent>
        <MudDataGridPager T="CarAdviceMainTable" />
    </PagerContent>
</MudDataGrid>

<div class="d-flex flex-wrap mt-4">
    <MudSwitch @bind-Checked="@_sortNameByLength" Color="Color.Primary">Sort Name Column By Length</MudSwitch>
</div>

<MudExpansionPanels Style="flex:1">
    <MudExpansionPanel Text="Show Events">
        @foreach (var message in _events)
        {
            <MudText Typo="@Typo.body2">@message</MudText>
        }
        @if (_events.Count > 0)
        {
            <div class="d-flex">
                <MudSpacer />
                <MudButton Class="mt-3" ButtonType="ButtonType.Button" Variant="Variant.Filled" OnClick="@(() => _events.Clear())">Clear</MudButton>
            </div>
        }
    </MudExpansionPanel>
</MudExpansionPanels>

@code {

    private string _searchString;
    private bool _sortNameByLength;
    private List<string> _events = new();
    List<CarAdviceMainTable> ListCAMainTable = new List<CarAdviceMainTable>();



    // custom sort by name length



    private Func<CarAdviceMainTable, object> _sortBy => x =>
    {
        if (_sortNameByLength)
            return x.PickingStatus.Length;
        else
            return x.PickingStatus;
    };
    // quick filter - filter gobally across multiple columns with the same input
    private Func<CarAdviceMainTable, bool> _quickFilter => x =>
    {
        if (string.IsNullOrWhiteSpace(_searchString))
            return true;

        //if (x.PickingStatus.Contains(_searchString, StringComparison.OrdinalIgnoreCase))
        //    return true;

        if (x.DriverS.Contains(_searchString, StringComparison.OrdinalIgnoreCase))
            return true;

        if (x.Destination.Contains(_searchString, StringComparison.OrdinalIgnoreCase))
            return true;



        return false;
    };


    private async Task ReadData()
    {
        DateTime ldStart = new DateTime(DateTime.Now.Year, 1, 1);
        DateTime ldEnd = DateTime.Now;


        string linkLoad = "/api/CarAdviceMainTables/GetbyDate/" + Helpers.ChangeDateToString(ldStart) + "/" + Helpers.ChangeDateToString(ldEnd);
        ListCAMainTable = await httpClient.GetFromJsonAsync<List<CarAdviceMainTable>>(linkLoad);
    }

    protected override async Task OnInitializedAsync()
    {
        await ReadData();
    }

    // events
    void RowClicked(DataGridRowClickEventArgs<CarAdviceMainTable> args)
    {
        _events.Insert(0, $"Event = RowClick, Index = {args.RowIndex}, Data = {System.Text.Json.JsonSerializer.Serialize(args.Item)}");
    }

    void SelectedItemsChanged(HashSet<CarAdviceMainTable> items)
    {
        _events.Insert(0, $"Event = SelectedItemsChanged, Data = {System.Text.Json.JsonSerializer.Serialize(items)}");
    }



}