@page "/NewCAfromExcel"
@using System.Data;
@using NPOI.SS.UserModel;
@using NPOI.XSSF.UserModel;
@using Newtonsoft.Json;
@using SCMDWH.Client.Tools;
@using SCMDWH.Shared.Models;
@using System.Text.Json;
@using System.Security.Claims;
@inject IDialogService DialogService;
@inject NavigationManager navigationManager
@inject HttpClient httpClient
@inject ISnackbar Snackbar
@inject IStringLocalizer<CultureExample2> Loc
@inject RecordLog rl;

<style>
    .mud-table-cell {
        padding: 0px !important;
        font-size: small !important;
        text-transform: uppercase !important;
        text-align: left !important;
    }
    .Nag {
       font-size:xx-small!important;
    }
    
</style>

<hr />
<InputFile OnChange="ReadExcelNpoi" class="form-control form-control-lg" id="formFileLg" type="file">Select excel file</InputFile>
<hr />

    
@if (listCarAdviceMainTableNew == null)
{
    <p><em>Loading...</em></p>
}
else
{
    <MudTable RowStyleFunc="@_rowStyleFunc" Items="@listCarAdviceMainTableNew" FixedHeader="@fixed_header" FixedFooter="@fixed_footer" Height="@(fixed_header || fixed_footer ?"400px":"")">
        <HeaderContent>
            <MudTh Class="Nag">Id</MudTh>
            <MudTh Class="Nag">@Loc["lbAdDate"]</MudTh>
            <MudTh Class="Nag">@Loc["lbClient"]</MudTh>
            <MudTh Class="Nag">@Loc["lbShipment"]</MudTh>
            <MudTh Class="Nag">@Loc["lbReference"]</MudTh>
            <MudTh Class="Nag">@Loc["lbDestination"]</MudTh>
            <MudTh Class="Nag">@Loc["lbCarriers"]</MudTh>
            <MudTh Class="Nag">@Loc["lbEtdDate"]</MudTh>
            <MudTh Class="Nag">@Loc["lbDriverWH"]</MudTh>
            <MudTh Class="Nag">@Loc["lbTruckplatesWH"]</MudTh>
            <MudTh Class="Nag">@Loc["lbRemarkWH"]</MudTh>
            <MudTh Class="Nag">@Loc["lbEdit"]</MudTh>
            <MudTh Class="Nag">@Loc["lbDelete"]</MudTh>
        </HeaderContent>
        <RowTemplate>
            <MudTd DataLabel="Nr">@context.ForwarderInfo</MudTd>
            <MudTd DataLabel="Nr">@context.AdviceDate</MudTd>
            <MudTd DataLabel="Sign">@context.Client</MudTd>
            <MudTd DataLabel="Name">@context.Shipment</MudTd>
            <MudTd DataLabel="Position">@context.Reference</MudTd>
            <MudTd DataLabel="Molar mass">@context.Destination</MudTd>
            <MudTd DataLabel="Molar mass">@context.Forwarder</MudTd>
            <MudTd DataLabel="Molar mass">@context.Etd</MudTd>
            <MudTd DataLabel="Molar mass">@context.DriverWh</MudTd>
             <MudTd DataLabel="Molar mass">@context.TruckPlatesWh</MudTd>
            <MudTd DataLabel="Molar mass">@context.RemarksWh</MudTd>
            <MudTd DataLabel="Edit">
                <MudIconButton @onclick="@(()=>Edit(@context))" Color="Color.Default" Icon="@Icons.Material.Filled.Edit" Size="Size.Small" IconSize="Size.Small" />
            </MudTd>
            <MudTd DataLabel="Delete">
                <MudIconButton @onclick="@(()=>Delete(@context))" Color="Color.Secondary" Icon="@Icons.Material.Filled.Delete" Size="Size.Small" IconSize="Size.Small" />
            </MudTd>
        </RowTemplate>
        <PagerContent>
            <MudTablePager PageSizeOptions="new int[]{50, 100}" />
        </PagerContent>
    </MudTable>

    <MudGrid>
        <MudItem xs="6">

        </MudItem>


        <MudItem xs="2">

        </MudItem>

        <MudItem xs="2">
            <MudButton OnClick="CloseCancel" Variant="Variant.Outlined" Size="Size.Medium" StartIcon="@Icons.Material.Filled.Cancel">@Loc["lbCancel"]</MudButton>
        </MudItem>
        <MudItem xs="2">
            <MudButton Color="Color.Primary" Variant="Variant.Outlined" Size="Size.Medium" StartIcon="@Icons.Material.Filled.Save" OnClick="CloseSave">@Loc["lbSave"]</MudButton>
        </MudItem>
    </MudGrid>
 }


@code {
    bool CAverification;
    bool fixed_header = true;
    bool fixed_footer = false;
    [CascadingParameter]
    public Task<AuthenticationState> AuthState { get; set; }
    string UserName = "";
    CarAdviceMainTable CarAdviceMainTableNew = new CarAdviceMainTable();
    CarAdviceMainTable UpdatedCarAdviceMainTableNew = new CarAdviceMainTable();
    List<CarAdviceMainTable> listCarAdviceMainTableNew = new List<CarAdviceMainTable>();
    private int quantityItemsSaved;


    protected async override void OnInitialized()
    {
        var authState = await AuthState;
        var user = authState.User;
        if (!user.Identity.IsAuthenticated)
        {
            navigationManager.NavigateTo("/login");
        }
        else
        {
            UserName = user.FindFirst(d => d.Type == ClaimTypes.Name)?.Value;
        }

    }

    private Func<CarAdviceMainTable, int, string> _rowStyleFunc => (x, i) =>
     {
         // Skan OK
         if (x.RemarksWh == "REFERENCE ALREADY UPLOADED!!!!")
             return "background-color:#f79f52";

         return "";
     };


    private void CloseCancel()
    {
        navigationManager.NavigateTo("/caradvice");
    }



    private async Task  CloseSave()
    {

        string[] tabForDelete =  new string[1000];
        int licznikTabeli = 0;

        foreach (var listforSave in  listCarAdviceMainTableNew)
        {
            CarAdviceMainTable CarAdviceMainTablejsonCamel = new();

            listforSave.Quality = null;
            listforSave.EntryByS = null;
            listforSave.TruckType = null;
            listforSave.FgDelayReason = null;
            listforSave.PickingStatus = null;
            listforSave.ClientNavigation = null;
            listforSave.TruckTypeNavigation = null;
            listforSave.DestinationNavigation = null;
            listforSave.FgDelayReasonNavigation = null;
            listforSave.PickingStatusNavigation = null;
            listforSave.Id = null;

            // Sprawdzenie czy istnieje reference 
            bool exitref = await ExitByReference(listforSave.Reference);
            if (exitref)
            {
                Snackbar.Add("Item already uploaded " + listforSave.ForwarderInfo, Severity.Error, config => { config.ShowCloseIcon = false; config.Icon = Icons.Rounded.Error; config.VisibleStateDuration = 2500; });
            }
            else
            {
                string linkpostca = "/api/CarAdviceMainTables";
                var Response = await httpClient.PostAsJsonAsync<CarAdviceMainTable>(linkpostca, listforSave);
                // zapisanie delete do logu operacji

                // odczytanie Id a odpowiedzi POST - do przetestowania 
                var jsonResposeWithId = await Response.Content.ReadAsStringAsync();
                // zamiana camel na pacal 


                CarAdviceMainTablejsonCamel = JsonConvert.DeserializeObject<CarAdviceMainTable>(jsonResposeWithId);
                string jsonStringCANew = System.Text.Json.JsonSerializer.Serialize(CarAdviceMainTablejsonCamel);

                rl.RecordOperationLog("New excel item",
                jsonStringCANew,
                UserName, 
                "Success");
                if (!Response.IsSuccessStatusCode)
                {
                    Snackbar.Add("Error Excel in row " + listforSave.ForwarderInfo, Severity.Error, config => { config.ShowCloseIcon = false; config.Icon = Icons.Rounded.Error; config.VisibleStateDuration = 2500; });
                }
                else
                {

                    tabForDelete[licznikTabeli] = listforSave.ForwarderInfo;
                    licznikTabeli++;
                }
            }
        }
        for (int i = 0 ; i <= tabForDelete.Length-1 ; i ++)
        {
            listCarAdviceMainTableNew.RemoveAll(c => c.ForwarderInfo == tabForDelete[i]);
        }
        StateHasChanged();       
        if (listCarAdviceMainTableNew.Count == 0) navigationManager.NavigateTo("/caradvice", true);
    }

    private async void Edit(CarAdviceMainTable caForEdit)
    {

        var parameters = new DialogParameters { ["PacaForEdit"] = caForEdit };
        var dialog = DialogService.Show<NewCarEditExcelComponent>("Edit ", parameters);
        var result = await dialog.Result;
        if (!result.Cancelled)
        {
            UpdatedCarAdviceMainTableNew = (CarAdviceMainTable)result.Data;

            var indexOf = listCarAdviceMainTableNew.IndexOf(listCarAdviceMainTableNew.FirstOrDefault(p => p.Id == UpdatedCarAdviceMainTableNew.Id));
            listCarAdviceMainTableNew[indexOf] = UpdatedCarAdviceMainTableNew;
            StateHasChanged();
        }
    }

    private async void Delete(CarAdviceMainTable caForDelete)
    {
        listCarAdviceMainTableNew.Remove(caForDelete);
        StateHasChanged();
    }


    async Task ReadExcelNpoi(InputFileChangeEventArgs e)
    {
        listCarAdviceMainTableNew = new();
        var fileStream = e.File.OpenReadStream();
        var ms = new MemoryStream();
        await fileStream.CopyToAsync(ms);
        ms.Position = 0;
        ISheet sheet;
        var xsswb = new XSSFWorkbook(ms);
        sheet = xsswb.GetSheetAt(0);
        IRow hr = sheet.GetRow(0);

        var rl = new List<string>();

        int cc = hr.LastCellNum;
        int counterId = 1;

        for (var j = sheet.FirstRowNum+1; j <= sheet.LastRowNum; j++)
        {
            var r = sheet.GetRow(j);

            CarAdviceMainTableNew = new();

            CarAdviceMainTableNew.ForwarderInfo = counterId.ToString();
            CarAdviceMainTableNew.Id = counterId;
            CarAdviceMainTableNew.AdviceDate = r.GetCell(0).DateCellValue;
            CarAdviceMainTableNew.Client = r.GetCell(1).StringCellValue;
            // CarAdviceMainTableNew.Shipment = r.GetCell(2).StringCellValue;
            CarAdviceMainTableNew.Shipment= NpoiExtension.GetFormattedCellValue(r.GetCell(2));
            // CarAdviceMainTableNew.Reference = r.GetCell(3).StringCellValue;
            CarAdviceMainTableNew.Reference = NpoiExtension.GetFormattedCellValue(r.GetCell(3));
            CarAdviceMainTableNew.Destination = NpoiExtension.GetFormattedCellValue(r.GetCell(4));
            CarAdviceMainTableNew.Forwarder = NpoiExtension.GetFormattedCellValue(r.GetCell(5));


            CarAdviceMainTableNew.DriverWh = NpoiExtension.GetFormattedCellValue(r.GetCell(8));

           
            CarAdviceMainTableNew.TruckPlatesWh = NpoiExtension.GetFormattedCellValue(r.GetCell(9));

            CarAdviceMainTableNew.RemarksWh = NpoiExtension.GetFormattedCellValue(r.GetCell(10));
           
            

            TimeSpan EtdExcelTime = r.GetCell(7).DateCellValue.TimeOfDay;
            DateTime EtdExcelFullDate = r.GetCell(6).DateCellValue.Add(EtdExcelTime);

            CarAdviceMainTableNew.Etd = EtdExcelFullDate;

            // verification reference if already uploaded 

            bool exitref = await ExitByReference(CarAdviceMainTableNew.Reference);

            if (exitref) CarAdviceMainTableNew.RemarksWh = "Reference already uploaded!!!!";

            // End verification 

            listCarAdviceMainTableNew.Add(CarAdviceMainTableNew);

            counterId++;
        }
    }

    private async Task<bool> ExitByReference(string references)
    {
        string linkver = "/api/CarAdviceMainTables/FoundByReference/" + references;
        bool refExit = await httpClient.GetFromJsonAsync<bool>(linkver);
        if (refExit) 
        {
            return true;
        }
        else
        {
            return false;
        }

    }


}