@page "/ImportPOExcel"
@using NPOI.SS.UserModel;
@using NPOI.XSSF.UserModel;
@using Newtonsoft.Json;
@using SCMDWH.Client.Tools;
@using SCMDWH.Shared.DTO;
@inject IStringLocalizer<CultureExample2> Loc
@inject HttpClient httpClient


<br />

<MudGrid Class="border-solid border-2 mud-border-default pa-4" Elevation="0">
    <MudItem xs="2">
        <MudFileUpload T="IBrowserFile" FilesChanged="UploadFiles">
            <ButtonTemplate>
                <MudButton HtmlTag="label"
                           Variant="Variant.Filled"
                           Color="Color.Default"
                           StartIcon="@Icons.Material.Filled.CloudUpload"
                           for="@context">
                    @Loc["lbUploadFiles"]
                </MudButton>
            </ButtonTemplate>
        </MudFileUpload>
    </MudItem>
    <MudItem xs="6">
        @if (files != null)
        {
            <MudListItem Icon="@Icons.Material.Filled.AttachFile">
                @ImportedfileName <code>@Importedfilesize</code>
            </MudListItem>
        }
    </MudItem>
</MudGrid>
<br />

@if (listImportSOPOExcelAfterVerification is null)
{
    <p>Read file .. </p>
}
else
{
    <MudDataGrid T="SoPoImportExcel" ColumnResizeMode="ResizeMode.Container" Dense="true" Hover="true" Bordered="true" Striped="true" FixedHeader="true" FixedFooter="true"
                 Height="40em" RowsPerPage="30" MultiSelection="false" Items="@listImportSOPOExcelAfterVerification" SortMode="SortMode.Multiple" Filterable="true"
                 FilterCaseSensitivity="DataGridFilterCaseSensitivity.CaseInsensitive">
        <ToolBarContent>
            <MudGrid>
                <MudItem xs="2">
                    <h5> Eshipping documents </h5>
                </MudItem>
            </MudGrid>
        </ToolBarContent>
        <Columns>
     

            <PropertyColumn Property="x => x.Id" Title="Id" Sortable="true" Filterable="false" />
            <PropertyColumn Property="x => x.Product" Title="Product" Sortable="true" Filterable="true" />
            <PropertyColumn Property="x => x.Qty" Title="Quantity" Sortable="true" Filterable="true" />
            <PropertyColumn Property="x => x.OrderNo" Title="DeliveryNote1" Sortable="true" Filterable="true" />
            <PropertyColumn Property="x => x.DestinationSAPId" Title="DeliveryNote2" Sortable="true" Filterable="true" />
            <PropertyColumn Property="x => x.WkNo" Title="Status" Sortable="true" Filterable="true" />
            <PropertyColumn Property="x => x.IsOk" Title="Status" Sortable="true" Filterable="true" />
            <PropertyColumn Property="x => x.ValidationTestResults" Title="Status" Sortable="true" Filterable="true" />
  
        </Columns>

        <PagerContent>
            <MudGrid>
                <MudItem xs="6">

                </MudItem>
                <MudItem xs="2">
                    <MudDataGridPager T="SoPoImportExcel" PageSizeOptions="new int[] { 20, 50, 100}" RowsPerPageString=@Loc["lbRowPerPage"] />
                </MudItem>
            </MudGrid>
        </PagerContent>
    </MudDataGrid>

}




@code {
    private string ImportedfileName = "";
    private string Importedfilesize = "";
    List<SoPoImportExcel> listImportSOPOExcel = new List<SoPoImportExcel>();
    List<SoPoImportExcel> listImportSOPOExcelAfterVerification = new List<SoPoImportExcel>();
    int counterId = 1;


    async Task ReadExcelNpoi(InputFileChangeEventArgs e)
    {


    }

    IList<IBrowserFile> files = new List<IBrowserFile>();
    private async void UploadFiles(IBrowserFile file)
    {
        ImportedfileName = file.Name;
        Importedfilesize = file.Size.ToString();
        //files.Add(file);

        listImportSOPOExcel = new();
        var fileStream = file.OpenReadStream();
        var ms = new MemoryStream();
        await fileStream.CopyToAsync(ms);
        ms.Position = 0;
        ISheet sheet;
        var xsswb = new XSSFWorkbook(ms);
        sheet = xsswb.GetSheetAt(0);
        IRow hr = sheet.GetRow(0);
        for (var j = sheet.FirstRowNum + 1; j <= sheet.LastRowNum; j++)
        {
            var r = sheet.GetRow(j);
            SoPoImportExcel importExcel = new();
            importExcel.Id = counterId;
            importExcel.OrderNo = NpoiExtension.GetFormattedCellValue(r.GetCell(2));
            importExcel.Qty = (int)r.GetCell(1).NumericCellValue;
            importExcel.DestinationSAPId = NpoiExtension.GetFormattedCellValue(r.GetCell(3));



            importExcel.Product = NpoiExtension.GetFormattedCellValue(r.GetCell(0));
            importExcel.WkNo = NpoiExtension.GetFormattedCellValue(r.GetCell(4));
            importExcel.IsOk = false;
            importExcel.ValidationTestResults = "Not Tested yet";
            listImportSOPOExcel.Add(importExcel);
            counterId++;
        }

        string linkCu = "/api/SoPoImportExcel/ValidateSOPOExcel";

        var responseAfterVerification = await httpClient.PostAsJsonAsync(linkCu, listImportSOPOExcel);


        if (responseAfterVerification.IsSuccessStatusCode)
        {
            var stringData = await responseAfterVerification.Content.ReadAsStringAsync();
            listImportSOPOExcelAfterVerification = JsonConvert.DeserializeObject<List<SoPoImportExcel>>(stringData);
        }

        StateHasChanged();

        }
        


    }


