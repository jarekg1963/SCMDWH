@page "/ImportPOExcel"
@using NPOI.SS.UserModel;
@using NPOI.XSSF.UserModel;
@using SCMDWH.Client.Tools;
@using SCMDWH.Shared.DTO;
@inject IStringLocalizer<CultureExample2> Loc
@inject HttpClient httpClient


<br />

<MudGrid Class="border-solid border-2 mud-border-default pa-4" Elevation="0">
    <MudItem xs="2">
        <MudFileUpload T="IBrowserFile" FilesChanged="UploadFiles">
            <ButtonTemplate>
                <MudButton HtmlTag="label"
                           Variant="Variant.Filled"
                           Color="Color.Default"
                           StartIcon="@Icons.Material.Filled.CloudUpload"
                           for="@context">
                    @Loc["lbUploadFiles"]
                </MudButton>
            </ButtonTemplate>
        </MudFileUpload>
    </MudItem>
    <MudItem xs="6">
        @if (files != null)
        {
            <MudListItem Icon="@Icons.Material.Filled.AttachFile">
                @ImportedfileName <code>@Importedfilesize</code>
            </MudListItem>
        }
    </MudItem>
</MudGrid>





@code {
    private string ImportedfileName = "";
    private string Importedfilesize = "";
    List<SoPoImportExcel> listImportSOPOExcel = new List<SoPoImportExcel>();
    int counterId = 1;


    async Task ReadExcelNpoi(InputFileChangeEventArgs e)
    {


    }

    IList<IBrowserFile> files = new List<IBrowserFile>();
    private async void UploadFiles(IBrowserFile file)
    {
        ImportedfileName = file.Name;
        Importedfilesize = file.Size.ToString();
        //files.Add(file);

        listImportSOPOExcel = new();
        var fileStream = file.OpenReadStream();
        var ms = new MemoryStream();
        await fileStream.CopyToAsync(ms);
        ms.Position = 0;
        ISheet sheet;
        var xsswb = new XSSFWorkbook(ms);
        sheet = xsswb.GetSheetAt(0);
        IRow hr = sheet.GetRow(0);
        for (var j = sheet.FirstRowNum + 1; j <= sheet.LastRowNum; j++)
        {
            var r = sheet.GetRow(j);
            SoPoImportExcel importExcel = new();
            importExcel.Id = counterId;
            importExcel.OrderNo = NpoiExtension.GetFormattedCellValue(r.GetCell(1));
            importExcel.Qty = (int)r.GetCell(2).NumericCellValue;
            importExcel.DestinationSAPId = NpoiExtension.GetFormattedCellValue(r.GetCell(3));
            string strIsCevaPo = NpoiExtension.GetFormattedCellValue(r.GetCell(4));
            if (strIsCevaPo == "1" )
            {
                importExcel.IsCevaPo = true;
            }
            else
            {
                importExcel.IsCevaPo = false;
            }

            importExcel.Product = NpoiExtension.GetFormattedCellValue(r.GetCell(5));
            importExcel.WkNo = NpoiExtension.GetFormattedCellValue(r.GetCell(6));
            importExcel.IsOk = false;
            importExcel.ValidationTestResults = "Not Tested yet";
            listImportSOPOExcel.Add(importExcel);
            counterId++;
        }

        string linkCu = "/api/SOPoList/ImportSOPOExcel";
        await httpClient.PostAsJsonAsync(linkCu, listImportSOPOExcel);

    }

}
