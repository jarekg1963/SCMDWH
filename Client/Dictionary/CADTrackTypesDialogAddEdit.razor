@using SCMDWH.Shared.Models;
@inject HttpClient httpClient;
@inject NavigationManager navigationManager
@inject ISnackbar Snackbar


<EditForm Model="@trackTypes" OnValidSubmit="HandleValidSubmit">
    <MudCard style="width:600px">
        <MudCardContent>
            <MudGrid>
                <MudItem xs="12">
                    <MudTextField @bind-Value="@trackTypes.Truck" Label="Truck type" Variant="Variant.Text" For="@(() => trackTypes.Truck)"></MudTextField>
                </MudItem>
                <MudItem xs="12">
                    <MudCheckBox @bind-Checked="@trackTypes.ActiveFlag" Size="Size.Medium" Label="Active"></MudCheckBox>
                </MudItem>
                <MudItem xs="12">
                    <MudTextField @bind-Value="@trackTypes.AddByUser" Label="Currier" Variant="Variant.Text"></MudTextField>
                </MudItem>
                <MudItem xs="12">
                    <MudTextField @bind-Value="@trackTypes.AddTime" Label="Currier" Variant="Variant.Text"></MudTextField>
                </MudItem>
            </MudGrid>
        </MudCardContent>
        <MudCardActions>
            <MudItem xs="8">
            </MudItem>
            <MudItem xs="2">
                <MudButton Variant="Variant.Filled" OnClick="Close">Cancel</MudButton>
            </MudItem>
            <MudButton Variant="Variant.Filled" OnClick="HandleValidSubmit">Save</MudButton>
        </MudCardActions>
    </MudCard>
</EditForm>

@code {
    [CascadingParameter] MudDialogInstance MudDialog { get; set; }
    [Parameter] public string Id { get; set; }
    string userName = "";

    [CascadingParameter]
    public Task<AuthenticationState> AuthState { get; set; }

    CarAdviceDictionaryTruckType trackTypes = new CarAdviceDictionaryTruckType();

    private async void HandleValidSubmit()
    {
        MudDialog.Close(DialogResult.Ok(trackTypes));
    }

    protected override async Task OnInitializedAsync()
    {
        var authState = await AuthState;
        var user = authState.User;

        if (!user.Identity.IsAuthenticated)
        {
            navigationManager.NavigateTo("/login");
        }
        else
        {
            userName = user.Identity.Name;
        }

        if (Id != "XXX")
        {
            await ReadData();
        }
        else
        {
            trackTypes.Truck = "";
            trackTypes.ActiveFlag = false;
            trackTypes.AddByUser = userName;
            trackTypes.AddTime = DateTime.Now;
        }
    }

    private async Task ReadData()
    {
        string link = "/api/CarAdviceDictionaryTruckTypes/" + Id;
        trackTypes = await httpClient.GetFromJsonAsync<CarAdviceDictionaryTruckType>(link);
        StateHasChanged();
    }

    void Close() => MudDialog.Close(DialogResult.Cancel());

}
