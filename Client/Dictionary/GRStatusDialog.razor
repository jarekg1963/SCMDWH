@using SCMDWH.Shared.Models;
@inject HttpClient httpClient;
@inject NavigationManager navigationManager
@inject ISnackbar Snackbar
@inject IStringLocalizer<CultureExample2> Loc

<EditForm Model="@newGrStatus" OnValidSubmit="HandleValidSubmit">
    <MudCard style="width:600px">
        <MudCardContent>
            <MudGrid>
                <MudItem xs="12">
                    <MudTextField @bind-Value="@newGrStatus.Status" Label="Name" Variant="Variant.Text" For="@(() => newGrStatus.Status)"></MudTextField>
                </MudItem>
               
                <MudItem xs="12">
                    <MudCheckBox @bind-Checked="@newGrStatus.ActiveFlag" Size="Size.Medium" Label="Active"></MudCheckBox>
                </MudItem>
                <MudItem xs="12">
                    <MudTextField @bind-Value="@newGrStatus.AddByUser" Label="User" ReadOnly="true" Variant="Variant.Text"></MudTextField>
                </MudItem>
                <MudItem xs="12">
                    <MudTextField @bind-Value="@newGrStatus.AddTime" Label="Date" ReadOnly="true" Variant="Variant.Text"></MudTextField>
                </MudItem>
            </MudGrid>
        </MudCardContent>
        <MudCardActions>
            <MudItem xs="6">
            </MudItem>
            <MudItem xs="4">
                <MudButton Variant="Variant.Filled" OnClick="Close">@Loc["lbCancel"]</MudButton>
            </MudItem>
            <MudItem xs="2">
                <MudButton Variant="Variant.Filled" OnClick="HandleValidSubmit">@Loc["lbSave"]</MudButton>
            </MudItem>
        </MudCardActions>
    </MudCard>
</EditForm>

@code {
    [CascadingParameter] MudDialogInstance MudDialog { get; set; }
    [Parameter] public string Id { get; set; }
    string userName = "";
    bool editSenederName = false;

    [CascadingParameter]
    public Task<AuthenticationState> AuthState { get; set; }

    CarAdviceGrDictionaryCarStatuses newGrStatus =new  CarAdviceGrDictionaryCarStatuses();

    private void HandleValidSubmit()
    {
        MudDialog.Close(DialogResult.Ok(newGrStatus));
    }


    void Close() => MudDialog.Close(DialogResult.Cancel());

    protected override async Task OnInitializedAsync()
    {
        var authState = await AuthState;
        var user = authState.User;

        if (!user.Identity.IsAuthenticated)
        {
            navigationManager.NavigateTo("/login");
        }
        else
        {
            userName = user.Identity.Name;
        }

        if (Id != "XXX")
        {
            editSenederName = false;
            await ReadData();
        }
        else
        {
            editSenederName = true;
            newGrStatus.Status = "";
            newGrStatus.ActiveFlag = false;
           
            newGrStatus.AddByUser = userName;
            newGrStatus.AddTime = DateTime.Now;
        }
    }

    private async Task ReadData()
    {
        string link = "/api/CarAdviceGrDictionaryCarStatuses/" + Id;
        newGrStatus = await httpClient.GetFromJsonAsync<CarAdviceGrDictionaryCarStatuses>(link);
        StateHasChanged();
    }



}
