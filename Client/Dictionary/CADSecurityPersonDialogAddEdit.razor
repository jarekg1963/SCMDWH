@using SCMDWH.Shared.Models;
@inject HttpClient httpClient;
@inject NavigationManager navigationManager
@inject ISnackbar Snackbar

<EditForm Model="@SecurityPerson" OnValidSubmit="HandleValidSubmit">
<MudCard style="width:600px">
    <MudCardContent>
        <MudGrid>
            <MudItem xs="12">
                    <MudTextField @bind-Value="@SecurityPerson.Security" Label="Scurity person" Variant="Variant.Text" For="@(() => SecurityPerson.Security)"></MudTextField>
            </MudItem>
                <MudItem xs="12">
                    <MudTextField @bind-Value="@SecurityPerson.ContactMobile" Label="Mobile" Variant="Variant.Text" For="@(() => SecurityPerson.Security)"></MudTextField>
                </MudItem>
                <MudItem xs="12">
                    <MudTextField @bind-Value="@SecurityPerson.ContactEmail" Label="Email" Variant="Variant.Text" For="@(() => SecurityPerson.Security)"></MudTextField>
                </MudItem>
                <MudItem xs="12">
                    <MudCheckBox @bind-Checked="@SecurityPerson.ActiveFlag" Size="Size.Medium" Label="Active"></MudCheckBox>
                </MudItem>
            <MudItem xs="12">
                    <MudTextField @bind-Value="@SecurityPerson.AddByUser" Label="Currier" Variant="Variant.Text"></MudTextField>
            </MudItem>
            <MudItem xs="12">
                    <MudTextField @bind-Value="@SecurityPerson.AddTime" Label="Currier" Variant="Variant.Text"></MudTextField>
            </MudItem>    
        </MudGrid>
    </MudCardContent>
    <MudCardActions>
        <MudItem xs="8">
        </MudItem>
        <MudItem xs="2">
        <MudButton Variant="Variant.Filled" OnClick="Close">Cancel</MudButton>
        </MudItem>
            <MudButton Variant="Variant.Filled" OnClick="HandleValidSubmit">Save</MudButton>
    </MudCardActions>
    </MudCard>
</EditForm>



@code {
    [CascadingParameter] MudDialogInstance MudDialog { get; set; }
    [Parameter] public string Id { get; set; }
    string userName = "";

    [CascadingParameter]
    public Task<AuthenticationState> AuthState { get; set; }

    CarAdviceDictionarySecurityPerson SecurityPerson = new CarAdviceDictionarySecurityPerson();

    private async void HandleValidSubmit()
    {
        MudDialog.Close(DialogResult.Ok(SecurityPerson));
    }

    protected override async Task OnInitializedAsync()
    {
        var authState = await AuthState;
        var user = authState.User;

        if (!user.Identity.IsAuthenticated)
        {
            navigationManager.NavigateTo("/login");
        }
        else
        {
            userName = user.Identity.Name;
        }

        if (Id != "XXX")
        {
            await ReadData();
        }
        else
        {
            SecurityPerson.Security = "";
            SecurityPerson.ContactMobile = "";
            SecurityPerson.ContactEmail = "";
            SecurityPerson.ActiveFlag = true;
            SecurityPerson.AddByUser = userName;
            SecurityPerson.AddTime = DateTime.Now;
        }
    }

    private async Task ReadData()
    {
        string link = "/api/CarAdviceDictionarySecurityPersons/" + Id;
        SecurityPerson = await httpClient.GetFromJsonAsync<CarAdviceDictionarySecurityPerson>(link);
        StateHasChanged();
    }

    void Close() => MudDialog.Close(DialogResult.Cancel());

}
