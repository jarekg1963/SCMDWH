// <auto-generated> This file has been auto generated by EF Core Power Tools. </auto-generated>
#nullable disable
using System;
using System.Collections.Generic;
using Microsoft.EntityFrameworkCore;
using SCMDWH.Shared.Models;

namespace SCMDWH.Server.Data;

public partial class PurchasingContext : DbContext
{
    public PurchasingContext(DbContextOptions<PurchasingContext> options)
        : base(options)
    {
    }

    public virtual DbSet<ErrorDataLog> ErrorDataLog { get; set; }
    public virtual DbSet<CarAdviceMainPlanColumn> CarAdviceMainPlanComum { get; set; }
    public virtual DbSet<GlobalAppRoles> GlobalAppRoles { get; set; }

    public virtual DbSet<GlobalAppUserRoles> GlobalAppUserRoles { get; set; }

    public virtual DbSet<GlobalAppUsers> GlobalAppUsers { get; set; }

    public DbSet<GlobalAppUsersParameters> GlobalAppUsersParameters { get; set; }


    public DbSet<SCMDWH.Shared.Models.CarAdviceDictionaryCarriers> CarAdviceDictionaryCarriers { get; set; } = default!;

    public DbSet<SCMDWH.Shared.Models.CarAdviceDictionaryCustomers> CarAdviceDictionaryCustomers { get; set; } = default!;

    public DbSet<SCMDWH.Shared.Models.CarAdviceDictionaryLoadingPlace> CarAdviceDictionaryLoadingPlace { get; set; } = default!;

    public DbSet<SCMDWH.Shared.Models.CarAdviceDictionaryStatus> CarAdviceDictionaryStatuses { get; set; } = default!;

    public DbSet<SCMDWH.Shared.Models.CarAdviceDictionaryReason> CarAdviceDictionaryReasons { get; set; } = default!;

    public DbSet<SCMDWH.Shared.Models.CarAdviceDictionaryTruckType> CarAdviceDictionaryTruckTypes { get; set; } = default!;

    public DbSet<SCMDWH.Shared.Models.LogAppReportingAction> LogAppReportingActions { get; set; } = default!;

    public DbSet<SCMDWH.Shared.Models.LogAppUserActivity> LogAppUserActivity { get; set; } = default!;

    public DbSet<SCMDWH.Shared.Models.CarAdviceMainTable> CarAdviceMainTable { get; set; } = default!;

    public DbSet<SCMDWH.Shared.Models.CarAdviceDictionaryCountryCode> CarAdviceDictionaryCountryCodes { get; set; } = default!;

    public DbSet<SCMDWH.Shared.Models.CarAdviceDictionaryQuality> CarAdviceDictionaryQuality { get; set; } = default!;

    public DbSet<SCMDWH.Shared.Models.PlanningLoading> PlanningLoading { get; set; } = default!;

    public virtual DbSet<CarAdviceGrDictionaryCarStatuses> CarAdviceGrDictionaryCarStatuses { get; set; }

    public virtual DbSet<CarAdviceGrDictionarySender> CarAdviceGrDictionarySender { get; set; }

    public virtual DbSet<CarAdviceGrDictionaryUnloadingPlace> CarAdviceGrDictionaryUnloadingPlace { get; set; }

    public virtual DbSet<CarAdviceGrDictionaryMaterialQ> CarAdviceGrDictionaryMaterialQ { get; set; }

    public virtual DbSet<CarAdviceGrDictionaryContainerQ> CarAdviceGrDictionaryContainerQ { get; set; }

    public virtual DbSet<CarAdviceGrMainPlanComum> CarAdviceGrMainPlanComum { get; set; }

    public virtual DbSet<CarAdviceGrTruckItems> CarAdviceGrTruckItems { get; set; }

    public virtual DbSet<CarAdviceGrTruckMainTable> CarAdviceGrTruckMainTable { get; set; }

    public virtual DbSet<SoModulePoList> SoModulePoList { get; set; }

    public virtual DbSet<View_SoModuleGroupData> View_SoModuleGroupDatas { get; set; }

    public virtual DbSet<SoModuleTruckList> SoModuleTruckList { get; set; }

    public virtual DbSet<SoModuleItemList> SoModuleItemsList { get; set; }



    protected override void OnModelCreating(ModelBuilder modelBuilder)
    {
        modelBuilder.UseCollation("Polish_CI_AS");


        modelBuilder.Entity<SoModulePoList>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK_SoModulePrList");

            entity.Property(e => e.DestinationCountryCode)
                .IsRequired()
                .HasMaxLength(2)
                .IsUnicode(false)
                .HasDefaultValueSql("('')");
            entity.Property(e => e.DestinationName)
                .IsRequired()
                .HasMaxLength(255)
                .HasDefaultValueSql("('')");
            entity.Property(e => e.DestinationSapid)
                .IsRequired()
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasDefaultValueSql("('')")
                .HasColumnName("DestinationSAPId");
            entity.Property(e => e.InsertByUser)
                .IsRequired()
                .HasMaxLength(30);
            entity.Property(e => e.InsertTime)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime");
            entity.Property(e => e.LastUpdateTime)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime");
            entity.Property(e => e.OrderNo)
                .IsRequired()
                .HasMaxLength(30)
                .HasDefaultValueSql("('')");
            entity.Property(e => e.OriginalAgreedDeliveryDate).HasColumnType("datetime");
            entity.Property(e => e.Product)
                .IsRequired()
                .HasMaxLength(30)
                .HasDefaultValueSql("('')");
            entity.Property(e => e.Reference)
                .IsRequired()
                .HasMaxLength(50)
                .HasDefaultValueSql("('')");
            entity.Property(e => e.Remark)
                .IsRequired()
                .HasMaxLength(200);
            entity.Property(e => e.Status)
                .IsRequired()
                .HasMaxLength(30)
                .HasDefaultValueSql("('')");
        });

        modelBuilder.Entity<CarAdviceGrDictionaryCarStatuses>(entity =>
        {
            entity.HasIndex(e => e.Status, "IX_CarAdviceGrDictionaryCarStatuses").IsUnique();

            entity.Property(e => e.ActiveFlag)
                .IsRequired()
                .HasDefaultValueSql("((1))");
            entity.Property(e => e.AddByUser)
                .IsRequired()
                .HasMaxLength(50)
                .HasDefaultValueSql("('')");
            entity.Property(e => e.AddTime)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime");
            entity.Property(e => e.Status)
                .IsRequired()
                .HasMaxLength(50)
                .HasDefaultValueSql("(N'Nie dojechał')");
        });

        modelBuilder.Entity<CarAdviceGrDictionarySender>(entity =>
        {
            entity.HasIndex(e => e.SenderName, "IX_CarAdviceGrDictionarySender").IsUnique();

            entity.Property(e => e.ActiveFlag)
                .IsRequired()
                .HasDefaultValueSql("((1))");
            entity.Property(e => e.AddByUser)
                .IsRequired()
                .HasMaxLength(50);
            entity.Property(e => e.AddTime)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime");
            entity.Property(e => e.Remark)
                .IsRequired()
                .HasMaxLength(200)
                .HasDefaultValueSql("('')");
            entity.Property(e => e.SenderName)
                .IsRequired()
                .HasMaxLength(50);
        });

        modelBuilder.Entity<CarAdviceGrDictionaryUnloadingPlace>(entity =>
        {
            entity.HasIndex(e => e.UnloadingPlace, "IX_CarAdviceGrDictionaryUnloadingPlace").IsUnique();

            entity.Property(e => e.ActiveFlag)
                .IsRequired()
                .HasDefaultValueSql("((1))");
            entity.Property(e => e.AddByUser)
                .IsRequired()
                .HasMaxLength(50);
            entity.Property(e => e.AddTime)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime");
            entity.Property(e => e.Remark)
                .IsRequired()
                .HasMaxLength(200)
                .HasDefaultValueSql("('')");
            entity.Property(e => e.UnloadingPlace)
                .IsRequired()
                .HasMaxLength(50);
        });

        modelBuilder.Entity<CarAdviceGrMainPlanComum>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK_CarAdviceGrMainPlanComums");

            entity.Property(e => e.MainScreenColumn)
                .IsRequired()
                .HasMaxLength(30)
                .IsUnicode(false);
            entity.Property(e => e.PlHeader)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasColumnName("plHeader");
            entity.Property(e => e.UserName)
                .IsRequired()
                .HasMaxLength(30)
                .IsUnicode(false);
        });

        modelBuilder.Entity<CarAdviceGrTruckItems>(entity =>
        {
            entity.Property(e => e.ContainerNo).HasMaxLength(50);
            entity.Property(e => e.InvoiceNo).HasMaxLength(50);
            entity.Property(e => e.Material)
                .HasMaxLength(18);
            entity.Property(e => e.PalletNo).HasMaxLength(50);
            entity.Property(e => e.Remark).HasMaxLength(500);
            entity.Property(e => e.SapGrMarDoc).HasMaxLength(50);
            entity.Property(e => e.SapGrTime).HasColumnType("datetime");

            entity.HasOne(d => d.Truck).WithMany(p => p.CarAdviceGrTruckItems)
                .HasForeignKey(d => d.TruckId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_CarAdviceGrTruckItems_CarAdviceGrTruckMainTable");
        });

        modelBuilder.Entity<CarAdviceGrTruckMainTable>(entity =>
        {
            entity.Property(e => e.AddByUser)
                .HasMaxLength(50);
            entity.Property(e => e.AddDate)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime");
            entity.Property(e => e.CallBy).HasMaxLength(50);
            entity.Property(e => e.DriverS).HasMaxLength(150);
            entity.Property(e => e.DriverWh).HasMaxLength(150);
            entity.Property(e => e.TpvEnterTime).HasColumnType("datetime");
            entity.Property(e => e.RemarkS).HasMaxLength(255);
			entity.Property(e => e.FgDelayReason)
			  .HasMaxLength(100)
			  .HasColumnName("FG_DelayReason");
            entity.Property(e => e.TruckPlatesS)
                .HasMaxLength(100)
                .IsFixedLength();
            entity.Property(e => e.TruckPlatesWh)
                .HasMaxLength(100)
                .IsFixedLength();
            entity.Property(e => e.TpvEnterTime)
               .HasColumnType("datetime")
               .HasColumnName("TPV_EnterTime");
            entity.Property(e => e.TpvExitTime)
                .HasColumnType("datetime")
                .HasColumnName("TPV_ExitTime");

        });


        modelBuilder.Entity<GlobalAppUsersParameters>(entity =>
        {
            entity.HasKey(e => e.UserName).HasName("PK_GlobalAppUsersParameters");

            entity.Property(e => e.UserName)
                .HasMaxLength(30)
                .IsUnicode(false);
            entity.Property(e => e.DateMainCAFrom).HasColumnName("DateMainCAFrom");
            entity.Property(e => e.DateMainCATo).HasColumnName("DateMainCATo");

        });


        modelBuilder.Entity<ErrorDataLog>(entity =>
        {

            entity.HasKey(e => e.LogId).HasName("PK_ErrorDataLog");

            entity.Property(e => e.LogId).HasColumnName("LogId");

            entity.Property(e => e.CreatedDate).HasColumnName("CreatedDate");

            entity.Property(e => e.EventName).HasColumnName("EventName");

            entity.Property(e => e.ExceptionMessage).HasColumnName("ExceptionMessage");

            entity.Property(e => e.LogLevel).HasColumnName("LogLevel");

            entity.Property(e => e.Source).HasColumnName("Source");

            entity.Property(e => e.StackTrace).HasColumnName("StackTrace");
        });

        modelBuilder.Entity<GlobalAppRoles>(entity =>
        {
            entity.HasKey(e => e.RoleName).HasName("PK_GlobalAppPriviledges_1");

            entity.Property(e => e.RoleName)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.Remarks).HasMaxLength(50);
        });

        modelBuilder.Entity<GlobalAppUserRoles>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK_GlobalAppUserPriviledges");

            entity.Property(e => e.AddByUser)
                .IsRequired()
                .HasMaxLength(30)
                .IsUnicode(false);
            entity.Property(e => e.AddTime).HasColumnType("smalldatetime");
            entity.Property(e => e.RoleName)
                .IsRequired()
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.UserName)
                .IsRequired()
                .HasMaxLength(30)
                .IsUnicode(false);

            entity.HasOne(d => d.RoleNameNavigation).WithMany(p => p.GlobalAppUserRoles)
                .HasForeignKey(d => d.RoleName)
                .HasConstraintName("FK_GlobalAppUserRoles_GlobalAppRoles");

            entity.HasOne(d => d.UserNameNavigation).WithMany(p => p.GlobalAppUserRoles)
                .HasForeignKey(d => d.UserName)
                .HasConstraintName("FK_GlobalAppUserRoles_GlobalAppUsers");
        });

        modelBuilder.Entity<GlobalAppUsers>(entity =>
        {
            entity.HasKey(e => e.UserName);

            entity.Property(e => e.UserName)
                .HasMaxLength(30)
                .IsUnicode(false);
            entity.Property(e => e.Active)
                .IsRequired()
                .HasDefaultValueSql("((1))");
            entity.Property(e => e.CreatedBy)
                .IsRequired()
                .HasMaxLength(30)
                .IsUnicode(false);
            entity.Property(e => e.CreatedTime).HasColumnType("datetime");
            entity.Property(e => e.Email)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.Mobile)
                .HasMaxLength(11)
                .IsUnicode(false);
            entity.Property(e => e.Remark)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasDefaultValueSql("('')");
        });

        modelBuilder.Entity<CarAdviceMainPlanColumn>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK_CarAdviceMainPlanComums");

            entity.Property(e => e.MainScreenColumn)
                .IsRequired()
                .HasMaxLength(30)
                .IsUnicode(false);
            entity.Property(e => e.UserName)
                .IsRequired()
                .HasMaxLength(30)
                .IsUnicode(false);
        });

        OnModelCreatingPartial(modelBuilder);
    }

    partial void OnModelCreatingPartial(ModelBuilder modelBuilder);

}